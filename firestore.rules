rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // --- Funções Auxiliares ---
    function isSignedIn() { return request.auth != null; }
    function hasRole(role) { return isSignedIn() && request.auth.token.role == role; }
    function isOwner(userId) { return isSignedIn() && request.auth.uid == userId; }
    function isUnitManager(unitId) { return hasRole('hospital') && request.auth.uid == unitId; }
    function isStaffMember(unitId) {
      return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.hospitalId == unitId;
    }

    // --- REGRAS PARA UTILIZADORES ---
    match /users/{userId} {
      allow read: if hasRole('admin') || isOwner(userId) || isUnitManager(resource.data.hospitalId);
      allow create, update: if isOwner(userId) || hasRole('admin');
      allow delete: if hasRole('admin');
    }
    
    // --- REGRAS PARA FLUXO DE ATENDIMENTO ---
    match /patients/{patientId} {
      allow read, write: if hasRole('admin') || isStaffMember(resource.data.unitId) || isUnitManager(resource.data.unitId);
      allow delete: if hasRole('admin');
    }
    match /serviceQueue/{queueId} {
      allow read, write: if hasRole('admin') || isUnitManager(resource.data.unitId) || isStaffMember(resource.data.unitId);
      allow delete: if hasRole('admin');
    }
    match /consultations/{consultationId} {
      allow read, write: if hasRole('admin') || isOwner(resource.data.doctorId) || isUnitManager(resource.data.hospitalId);
      allow delete: if hasRole('admin');
    }
    
    // --- REGRAS DE NEGÓCIO UNIFICADAS ---
    match /settings/{settingId} { allow read, write: if hasRole('admin'); }
    match /specialties/{specialtyId} { allow read: if true; allow write: if hasRole('admin'); }
    match /invitations/{invitationId} { allow create: if hasRole('admin') || hasRole('hospital'); allow read, update, delete: if false; }
    match /caravanEvents/{eventId} { allow read: if isSignedIn(); allow write: if hasRole('admin'); }
    match /shiftRequirements/{requirementId} { allow read: if isSignedIn(); allow create: if hasRole('admin') || (hasRole('hospital') && request.resource.data.hospitalId == request.auth.uid); allow update, delete: if hasRole('admin') || (isSignedIn() && resource.data.hospitalId == request.auth.uid); }
    match /timeRecords/{recordId} { allow read: if hasRole('admin') || (isSignedIn() && (resource.data.doctorId == request.auth.uid || resource.data.hospitalId == request.auth.uid)); allow write: if hasRole('admin') || isOwner(resource.data.doctorId); }
    match /potentialMatches/{matchId} { allow read, write: if hasRole('admin') || (isSignedIn() && (resource.data.doctorId == request.auth.uid || resource.data.hospitalId == request.auth.uid)); allow delete: if hasRole('admin');}
    match /contracts/{contractId} {
      allow read, write: if hasRole('admin') || (isSignedIn() && (resource.data.doctorId == request.auth.uid || resource.data.hospitalId == request.auth.uid));
    }
    match /doctorTimeSlots/{timeSlotId} {
      allow read, write, delete: if hasRole('admin') || isOwner(resource.data.doctorId);
    }
    
    // <<< CORREÇÃO: A regra aponta para "appointments" e não mais para a coleção antiga >>>
    match /appointments/{appointmentId} {
      allow read, write: if hasRole('admin') || isOwner(resource.data.doctorId);
    }

    // <<< REMOVIDO: A regra para 'telemedicineAppointments' foi removida por ser redundante >>>
  }
}