rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // --- REGRAS MAIS ABERTAS PARA LEITURA P√öBLICA ---

    // Cole√ß√£o "specialties" (Lista geral de especialidades, se existir)
    match /specialties/{specialtyId} {
      allow read: if true;
      allow write: if request.auth != null && request.auth.token.role == 'admin';
    }

    // Cole√ß√£o "settings" (Configura√ß√µes gerais)
    match /settings/{settingId} {
      allow read: if true;
      allow write: if request.auth != null && request.auth.token.role == 'admin';
    }

    // ============================================================================
    // üîπ CORRE√á√ÉO DEFINITIVA PARA O ERRO DE TELEMEDICINA üîπ
    // ============================================================================
    // Cole√ß√£o "telemedicine": Permite que QUALQUER UM leia o doc de especialidades.
    match /telemedicine/specialties { // Regra espec√≠fica para este documento
        allow read: if true; // Permite leitura p√∫blica
        allow write: if request.auth != null && request.auth.token.role == 'admin'; // S√≥ admin modifica
    }
    // (Adicione outras regras para /telemedicine/{outroDoc} se necess√°rio)
    // ============================================================================


    // --- REGRAS PARA USU√ÅRIOS LOGADOS ---

    match /users/{userId} {
      allow get: if request.auth != null && (request.auth.uid == userId || request.auth.token.role in ['admin', 'hospital']);
      allow list: if request.auth != null && request.auth.token.role in ['admin', 'hospital'];
      allow update: if request.auth != null && request.auth.uid == userId;
    }

    match /hospitals/{hospitalId} {
      allow read, write: if request.auth != null && request.auth.token.role in ['admin', 'hospital'];
    }

    match /caravanas/{caravanaId} {
      allow read, write: if request.auth != null && request.auth.token.role in ['admin', 'caravan_admin'];
    }

    match /appointments/{appointmentId} {
      allow read, create, update: if request.auth != null && request.auth.token.role in ['admin', 'hospital', 'doctor', 'receptionist', 'triage_nurse'];
      allow delete: if request.auth != null && request.auth.token.role == 'admin';
    }

    match /metrics/{metricId} {
      allow read, write: if request.auth != null && request.auth.token.role in ['admin', 'hospital'];
    }

    match /products/{productId} {
        allow read: if request.auth != null;
        allow create, update, delete: if request.auth != null && request.auth.token.role == 'admin';
    }

    match /consultations/{consultationId}/billingItems/{itemId} {
        allow read, write: if request.auth != null && request.auth.token.role in ['admin', 'hospital', 'doctor', 'triage_nurse'];
    }

    match /shiftRequirements/{requirementId} {
        allow read: if request.auth != null;
        allow create: if request.auth != null && request.auth.token.role == 'hospital';
        allow update: if request.auth != null && request.auth.token.role == 'hospital' && resource.data.hospitalId == request.auth.uid; // Assumindo que hospitalId existe
        allow delete: if request.auth != null && request.auth.token.role == 'hospital' && resource.data.hospitalId == request.auth.uid; // Assumindo que hospitalId existe
    }

    match /doctorTimeSlots/{slotId} {
        allow read: if request.auth != null;
        allow create, update, delete: if request.auth != null && request.auth.token.role == 'doctor' && request.resource.data.doctorId == request.auth.uid;
    }

    // --- REGRA GEN√âRICA (Fallback - Menos Segura) ---
    // Tente evitar depender desta regra. Defina regras expl√≠citas acima.
    match /{document=**} {
      allow read, write: if request.auth != null &&
        request.auth.token.role in [
          'admin',
          'hospital',
          'doctor',
          'receptionist',
          'triage_nurse',
          'caravan_admin'
        ];
    }
  }
}