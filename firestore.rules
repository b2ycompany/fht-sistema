rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // ========================================================
    // ðŸ”¹ 1. Regras da coleÃ§Ã£o "users"
    // ========================================================
    match /users/{userId} {
      // UsuÃ¡rio autenticado pode ler e editar o prÃ³prio perfil
      allow get, update: if request.auth != null && request.auth.uid == userId;

      // Admin e Hospital podem listar e ler todos os perfis (usado em dashboards e relatÃ³rios)
      allow list, get: if request.auth != null && request.auth.token.role in ['admin', 'hospital'];

      // Admin pode criar novos usuÃ¡rios
      allow create: if request.auth != null && request.auth.token.role == 'admin';

      // Permitir consultas agregadas (COUNT, SUM, etc.)
      allow aggregate: if request.auth != null && request.auth.token.role in ['admin', 'hospital'];
    }

    // ========================================================
    // ðŸ”¹ 2. Regras da coleÃ§Ã£o "hospitals"
    // ========================================================
    match /hospitals/{hospitalId} {
      // Admin e Hospital tÃªm acesso completo
      allow read, write: if request.auth != null && request.auth.token.role in ['admin', 'hospital'];
    }

    // ========================================================
    // ðŸ”¹ 3. Regras da coleÃ§Ã£o "caravanas"
    // ========================================================
    match /caravanas/{caravanaId} {
      // Admin e Caravan Admin podem ler e editar caravanas
      allow read, write: if request.auth != null && request.auth.token.role in ['admin', 'caravan_admin'];
    }

    // ========================================================
    // ðŸ”¹ 4. Regras da coleÃ§Ã£o "appointments" (exemplo)
    // ========================================================
    match /appointments/{appointmentId} {
      // MÃ©dicos, recepcionistas, enfermeiros de triagem e hospitais podem ler ou criar
      allow read, create, update: if request.auth != null && 
        request.auth.token.role in ['admin', 'hospital', 'doctor', 'receptionist', 'triage_nurse'];

      // Admin tem acesso total
      allow delete: if request.auth != null && request.auth.token.role == 'admin';
    }

    // ========================================================
    // ðŸ”¹ 5. Regras da coleÃ§Ã£o "metrics" ou "reports" (caso exista)
    // ========================================================
    match /metrics/{metricId} {
      allow read, write, aggregate: if request.auth != null && request.auth.token.role in ['admin', 'hospital'];
    }

    // ========================================================
    // ðŸ”¹ 6. Regras da coleÃ§Ã£o "settings" (configuraÃ§Ãµes gerais)
    // ========================================================
    match /settings/{settingId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && request.auth.token.role == 'admin';
    }

    // ========================================================
    // ðŸ”¹ 7. Regras genÃ©ricas (fallback)
    // ========================================================
    match /{document=**} {
      // Apenas usuÃ¡rios autenticados com role reconhecida
      allow read, write, aggregate: if request.auth != null && 
        request.auth.token.role in [
          'admin',
          'hospital',
          'doctor',
          'receptionist',
          'triage_nurse',
          'caravan_admin'
        ];
    }
  }
}
