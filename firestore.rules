rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // --- Funções Auxiliares ---
    function isSignedIn() {
      return request.auth != null;
    }
    function hasRole(role) {
      return isSignedIn() && request.auth.token.role == role;
    }
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }
    function isUnitManager(unitId) {
      return hasRole('hospital') && request.auth.uid == unitId;
    }
    function isStaffOfUnit(unitId) {
      return isSignedIn() && "hospitalId" in request.auth.token && request.auth.token.hospitalId == unitId;
    }

    // --- REGRAS PARA UTILIZADORES ---
    match /users/{userId} {
      allow get: if hasRole('admin') || isOwner(userId) || (hasRole('hospital') && resource.data.hospitalId == request.auth.uid);
      
      // <<< CORREÇÃO 1: PERMISSÃO DE LISTAGEM DA EQUIPA >>>
      // Permite que um 'hospital' liste apenas os utilizadores cujo campo 'hospitalId'
      // é igual ao seu próprio UID. A sua página de equipa faz exatamente esta consulta.
      allow list: if hasRole('admin') || (hasRole('hospital') && request.query.where.body.compositeFilter.filters[0].fieldFilter.value.stringValue == request.auth.uid);
      
      allow create: if isOwner(userId) || hasRole('admin');
      allow update: if isOwner(userId) || hasRole('admin');
      allow delete: if hasRole('admin');

      match /hospitalDoctors/{doctorId} {
        allow read, write: if hasRole('admin') || isOwner(userId);
      }
    }
    
    // --- REGRAS PARA O FLUXO DE ATENDIMENTO ---
    match /patients/{patientId} {
      allow read, update: if hasRole('admin') || isStaffOfUnit(resource.data.unitId);
      allow create: if isSignedIn() && request.resource.data.unitId == request.auth.token.hospitalId;
      allow delete: if hasRole('admin');
    }

    match /serviceQueue/{queueId} {
      allow read, update, create: if hasRole('admin') || isStaffOfUnit(resource.data.unitId);
      
      // <<< CORREÇÃO 2: PERMISSÃO DE CONTAGEM NA FILA >>>
      // Permite que um 'hospital' conte os itens da fila que pertencem à sua unidade.
      allow list: if hasRole('admin') || (hasRole('hospital') && request.query.where.body.compositeFilter.filters[0].fieldFilter.value.stringValue == request.auth.uid);
      
      allow delete: if hasRole('admin');
    }

    // --- REGRAS PARA CONSULTAS ---
    match /consultations/{consultationId} {
      allow read, update, create: if hasRole('admin') || isUnitManager(resource.data.hospitalId) || isOwner(resource.data.doctorId);
      
      // <<< CORREÇÃO 3: PERMISSÃO DE CONTAGEM NAS CONSULTAS >>>
      // Permite que um 'hospital' conte as consultas da sua unidade.
      allow list: if hasRole('admin') || (hasRole('hospital') && request.query.where.body.compositeFilter.filters[0].fieldFilter.value.stringValue == request.auth.uid);
      
      allow delete: if hasRole('admin');
    }
    
    // --- OUTRAS REGRAS DE NEGÓCIO ---
    match /settings/{settingId} {
      allow read, write: if hasRole('admin');
    }
    match /contracts/{contractId} {
      allow read, write: if hasRole('admin') || (isSignedIn() && (resource.data.doctorId == request.auth.uid || resource.data.hospitalId == request.auth.uid));
    }
    match /potentialMatches/{matchId} {
      allow read, write: if hasRole('admin') || (isSignedIn() && (resource.data.doctorId == request.auth.uid || resource.data.hospitalId == request.auth.uid));
    }
    match /specialties/{specialtyId} {
      allow read: if true;
      allow write: if hasRole('admin');
    }
    match /invitations/{invitationId} {
      allow create: if hasRole('admin') || hasRole('hospital');
      allow read, update, delete: if false;
    }
    match /caravanEvents/{eventId} {
      allow read: if isSignedIn();
      allow write: if hasRole('admin');
    }
    match /shiftRequirements/{requirementId} {
      allow read: if isSignedIn();
      allow create: if hasRole('admin') || (hasRole('hospital') && request.resource.data.hospitalId == request.auth.uid);
      allow update, delete: if hasRole('admin') || (isSignedIn() && resource.data.hospitalId == request.auth.uid);
    }
    match /timeRecords/{recordId} {
      allow read: if hasRole('admin') || (isSignedIn() && (resource.data.doctorId == request.auth.uid || resource.data.hospitalId == request.auth.uid));
      allow write: if hasRole('admin') || (isSignedIn() && request.auth.uid == request.auth.doctorId);
    }
    match /doctorTimeSlots/{timeSlotId} {
      allow read, write, delete: if hasRole('admin') || (isSignedIn() && resource.data.doctorId == request.auth.uid);
    }
    match /appointments/{appointmentId} {
      allow read: if hasRole('admin') || (isSignedIn() && resource.data.doctorId == request.auth.uid);
    }
  }
}