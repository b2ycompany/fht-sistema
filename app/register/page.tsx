// app/register/page.tsx
"use client";

import type React from "react";
import { useState, useMemo, ChangeEvent, useEffect, useCallback, useRef } from "react";
import Link from "next/link";
import { useRouter } from "next/navigation";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { useIMask } from 'react-imask';
import { Label } from "@/components/ui/label";
import { RadioGroup, RadioGroupItem } from "@/components/ui/radio-group";
import { Switch } from "@/components/ui/switch";
import { Textarea } from "@/components/ui/textarea";
import { useToast } from "@/hooks/use-toast";
import {
    registerUser,
    type UserType,
    type DoctorRegistrationPayload,
    type HospitalRegistrationPayload,
    type AddressInfo,
    type PersonalInfo,
    type LegalRepresentativeInfo,
    type DoctorDocumentsRef,
    type SpecialistDocumentsRef,
    type HospitalDocumentsRef,
    type LegalRepDocumentsRef
} from "@/lib/auth-service";
import { FirebaseError } from "firebase/app";
import { cn } from "@/lib/utils";
import { Loader2, Check, AlertTriangle, Info, Stethoscope, Building } from "lucide-react";

// --- Tipos Locais ---
interface Credentials { password: string; confirmPassword: string; }
// Interface local para estado do form Hospital Info (usada abaixo)
interface HospitalInfo { companyName: string; cnpj: string; stateRegistration?: string; phone: string; email: string;}
interface HospitalInfoState { companyName: string; cnpj: string; stateRegistration?: string; phone: string; email: string;}
interface DoctorDocumentsState { personalRg: File | null; personalCpf: File | null; professionalCrm: File | null; photo3x4: File | null; addressProof: File | null; graduationCertificate: File | null; criminalRecordCert: File | null; ethicalCert: File | null; debtCert: File | null; cv: File | null; }
interface SpecialistDocumentsState { rqe: File | null; postGradCert: File | null; specialistTitle: File | null; recommendationLetter: File | null; }
interface HospitalDocumentsState { socialContract: File | null; cnpjCard: File | null; companyAddressProof: File | null; }
interface LegalRepDocumentsState { repRg: File | null; repCpf: File | null; repAddressProof: File | null; }

// --- Document Labels Config ---
const DOCUMENT_LABELS = { personalRg: "RG Pessoal*", personalCpf: "CPF Pessoal*", professionalCrm: "Carteira Profissional (CRM)*", photo3x4: "Foto 3x4 Recente*", addressProof: "Comprovante de Residência Pessoal*", graduationCertificate: "Certificado de Graduação*", criminalRecordCert: "Certidão Negativa Criminal*", ethicalCert: "Certidão Negativa Ético-Profissional*", debtCert: "Certidão Negativa de Débitos CRM*", cv: "Currículo Vitae (CV)*", rqe: "Registro de Qualificação de Especialista (RQE)*", postGradCert: "Certificado de Pós-Graduação/Residência*", specialistTitle: "Título de Especialista*", recommendationLetter: "Carta de Recomendação (Opcional)", socialContract: "Contrato Social*", cnpjCard: "Cartão CNPJ*", companyAddressProof: "Comprovante de Endereço da Empresa*", repRg: "RG do Responsável*", repCpf: "CPF do Responsável*", repAddressProof: "Comprovante de Residência do Responsável*", } as const;
type DoctorDocKeys = keyof DoctorDocumentsState; type SpecialistDocKeys = keyof SpecialistDocumentsState; type HospitalDocKeys = keyof HospitalDocumentsState; type LegalRepDocKeys = keyof LegalRepDocumentsState; type AllDocumentKeys = keyof typeof DOCUMENT_LABELS;

// --- Step Indicator Component ---
interface StepIndicatorProps { steps: string[]; currentStep: number; }
const StepIndicator: React.FC<StepIndicatorProps> = ({ steps, currentStep }) => { /* ...código como antes... */ return ( <div className="flex items-center justify-between mb-8 relative max-w-full overflow-x-auto pb-2"> <div className="absolute top-4 left-0 right-0 h-0.5 bg-gray-300 transform -translate-y-1/2 -z-10" style={{ width: `calc(100% - ${100 / (steps.length || 1)}%)`, margin: '0 auto' }}> <div className="h-full bg-blue-600 transition-all duration-300 ease-in-out" style={{ width: `${(currentStep / Math.max(1, steps.length - 1)) * 100}%` }} /> </div> {steps.map((label, index) => ( <div key={label + index} className="flex flex-col items-center z-10 min-w-[60px] px-1"> <div className={cn("w-7 h-7 rounded-full flex items-center justify-center text-xs font-medium transition-colors duration-300 border-2", index === currentStep ? "bg-blue-600 text-white border-blue-700 ring-2 ring-offset-2 ring-blue-600" : index < currentStep ? "bg-blue-600 text-white border-blue-700" : "bg-gray-200 text-gray-600 border-gray-300")}> {index < currentStep ? <Check size={14} /> : index + 1} </div> <span className={cn("text-[10px] sm:text-xs mt-1.5 text-center max-w-[70px] break-words leading-tight", index <= currentStep ? "text-blue-700 font-medium" : "text-gray-500")}>{label}</span> </div> ))} </div> ); };

// --- Registration Summary Component ---
type SummaryData = { personalInfo?: PersonalInfo; addressInfo?: AddressInfo; doctorDocuments?: DoctorDocumentsState; isSpecialist?: boolean; specialistDocuments?: SpecialistDocumentsState; hospitalInfo?: HospitalInfo; hospitalAddressInfo?: AddressInfo; hospitalDocuments?: HospitalDocumentsState; legalRepresentativeInfo?: LegalRepresentativeInfo; legalRepDocuments?: LegalRepDocumentsState; credentials?: Partial<Credentials>; };
interface RegistrationSummaryProps { role: UserType; data: SummaryData; onEdit: (stepId: string) => void; }
const SummaryField: React.FC<{ label: string; value: string | undefined | null }> = ({ label, value }) => { /* ...código como antes... */ if (!value) return null; return ( <p className="text-sm"><strong className="font-medium text-gray-700">{label}:</strong> <span className="text-gray-600 ml-1 break-words">{value}</span></p> ); };
const SummaryFileField: React.FC<{ label: string; file: File | null }> = ({ label, file }) => { /* ...código como antes... */ return ( <p className="text-sm"><strong className="font-medium text-gray-700">{label.replace('*', '')}:</strong> <span className={`text-xs ml-1 ${file ? 'text-green-700 font-medium truncate max-w-[150px] inline-block align-middle' : 'text-gray-500 italic'}`} title={file?.name}>{file ? file.name : "Não enviado"}</span></p> ); };
const RegistrationSummary: React.FC<RegistrationSummaryProps> = ({ role, data, onEdit }) => { /* ...código como antes... */ const renderSection = (title: string, stepId: string, children: React.ReactNode) => ( <div className="mb-4 p-4 border border-gray-200 rounded-lg shadow-sm bg-white relative"> <Button variant="outline" size="sm" onClick={() => onEdit(stepId)} className="absolute top-2 right-2 text-xs h-6 px-2 z-10">Editar</Button> <h3 className="text-base font-semibold mb-3 text-gray-800 border-b pb-1.5">{title}</h3> <div className="space-y-1.5">{children}</div> </div> ); const formatDoc = (value: string | undefined, type: 'cpf' | 'cnpj' | 'phone' | 'cep' | 'rg') => { if (!value) return value; const cleanValue = value.replace(/[^\dX]/gi, ''); if (type === 'cpf' && cleanValue.length === 11) return cleanValue.replace(/(\d{3})(\d{3})(\d{3})(\d{2})/, '$1.$2.$3-$4'); if (type === 'cnpj' && cleanValue.length === 14) return cleanValue.replace(/^(\d{2})(\d{3})(\d{3})(\d{4})(\d{2})$/, '$1.$2.$3/$4-$5'); if (type === 'phone') { return cleanValue.length > 10 ? cleanValue.replace(/(\d{2})(\d{5})(\d{4})/, '($1) $2-$3') : cleanValue.replace(/(\d{2})(\d{4})(\d{4})/, '($1) $2-$3'); } if (type === 'cep' && cleanValue.length === 8) return cleanValue.replace(/(\d{5})(\d{3})/, '$1-$2'); if (type === 'rg') { return value; } return value; }; return ( <div className="space-y-4 bg-gray-50 p-4 sm:p-6 rounded-lg animate-fade-in"> <h2 className="text-xl sm:text-2xl font-bold text-center text-gray-800 mb-4 sm:mb-6">Revise seus Dados</h2> {/* ... Resto do JSX do Summary como antes ... */} </div> ); };

// --- Componente Wrapper para Input com useIMask ---
interface InputWithIMaskProps extends Omit<React.InputHTMLAttributes<HTMLInputElement>, 'onAccept' | 'value' | 'defaultValue'> { maskOptions: any; onAccept: (value: string, maskRef: any) => void; defaultValue?: string; }
const InputWithIMask: React.FC<InputWithIMaskProps> = ({ maskOptions, onAccept, id, defaultValue, ...rest }) => { const { ref } = useIMask(maskOptions, { onAccept }); return <Input ref={ref as React.RefObject<HTMLInputElement>} id={id} defaultValue={defaultValue} {...rest} />; };

// --- Main Register Page Component ---
export default function RegisterPage() {
    const [step, setStep] = useState(0);
    const [role, setRole] = useState<UserType | null>(null);
    const [isLoading, setIsLoading] = useState(false);
    const [isUploading, setIsUploading] = useState(false);
    const router = useRouter();
    const { toast } = useToast();

    // --- States ---
    const [personalInfo, setPersonalInfo] = useState<PersonalInfo>({ name: "", dob: "", rg: "", cpf: "", phone: "", email: "" });
    const [addressInfo, setAddressInfo] = useState<AddressInfo>({ cep: "", street: "", number: "", complement: "", neighborhood: "", city: "", state: "" });
    const [doctorDocuments, setDoctorDocuments] = useState<DoctorDocumentsState>({ personalRg: null, personalCpf: null, professionalCrm: null, photo3x4: null, addressProof: null, graduationCertificate: null, criminalRecordCert: null, ethicalCert: null, debtCert: null, cv: null });
    const [isSpecialist, setIsSpecialist] = useState<boolean>(false);
    const [specialistDocuments, setSpecialistDocuments] = useState<SpecialistDocumentsState>({ rqe: null, postGradCert: null, specialistTitle: null, recommendationLetter: null });
    const [hospitalInfo, setHospitalInfo] = useState<HospitalInfo>({ companyName: "", cnpj: "", stateRegistration: "", phone: "", email: ""}); // Usa tipo local HospitalInfo
    const [hospitalAddressInfo, setHospitalAddressInfo] = useState<AddressInfo>({ cep: "", street: "", number: "", complement: "", neighborhood: "", city: "", state: "" });
    const [hospitalDocuments, setHospitalDocuments] = useState<HospitalDocumentsState>({ socialContract: null, cnpjCard: null, companyAddressProof: null });
    const [legalRepresentativeInfo, setLegalRepresentativeInfo] = useState<LegalRepresentativeInfo>({ name: "", dob: "", rg: "", cpf: "", phone: "", email: "", position: "" });
    const [legalRepDocuments, setLegalRepDocuments] = useState<LegalRepDocumentsState>({ repRg: null, repCpf: null, repAddressProof: null });
    const [credentials, setCredentials] = useState<Credentials>({ password: "", confirmPassword: "" });

    // --- Step Configuration ---
    const stepsConfig = useMemo(() => { if (!role) return [{ id: 'role', label: 'Tipo' }]; if (role === 'hospital') { return [ { id: 'role', label: 'Tipo' }, { id: 'hospitalInfo', label: 'Dados Empresa' }, { id: 'hospitalAddress', label: 'Endereço Empresa' }, { id: 'hospitalDocs', label: 'Docs Empresa' }, { id: 'legalRepInfo', label: 'Responsável' }, { id: 'legalRepDocs', label: 'Docs Responsável' }, { id: 'credentials', label: 'Senha' }, { id: 'summary', label: 'Revisão' } ]; } const doctorBaseSteps = [ { id: 'role', label: 'Tipo' }, { id: 'personalInfo', label: 'Dados Pessoais' }, { id: 'addressInfo', label: 'Endereço' }, { id: 'essentialDocs', label: 'Docs Essenciais' }, { id: 'certsAndCvDocs', label: 'Certidões/CV' }, { id: 'isSpecialist', label: 'Especialidade?' } ]; const specialistStep = isSpecialist ? [{ id: 'specialistDocs', label: 'Docs Especialista' }] : []; const finalSteps = [ { id: 'credentials', label: 'Senha' }, { id: 'summary', label: 'Revisão' } ]; return [...doctorBaseSteps, ...specialistStep, ...finalSteps]; }, [role, isSpecialist]);
    const currentStepIndex = step;
    const currentStepConfig = stepsConfig[currentStepIndex];
    const totalSteps = stepsConfig.length;

    // --- Validation Functions ---
    const isValidEmail = (email: string) => /^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(email);
    const isValidCPF = (cpf: string) => /^\d{11}$/.test(cpf);
    const isValidCNPJ = (cnpj: string) => /^\d{14}$/.test(cnpj);
    const isValidCEP = (cep: string) => /^\d{8}$/.test(cep);
    const isValidPhone = (phone: string) => /^\d{10,11}$/.test(phone);
    const isValidRG = (rg: string) => !!rg && rg.replace(/[^\dX.-]/gi, '').length >= 5;
    const isValidDate = (date: string) => /^\d{4}-\d{2}-\d{2}$/.test(date) && !isNaN(Date.parse(date)) && new Date(date) < new Date();
    const isValidPassword = (password: string) => password.length >= 6;
    const isNotEmpty = (value: string | undefined | null) => !!value && value.trim().length > 0;
    const isFilePresent = (file: File | null) => file !== null;

    // --- Handlers ---
    const handleInputChange = useCallback(( e: ChangeEvent<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>, setState: React.Dispatch<React.SetStateAction<any>>, field: string ) => {
        console.log(`Input Change: Field=${field}, Value=${e.target.value}, SetState Function Name=${setState.name}`); // LOGGING
        setState((prev: any) => ({ ...prev, [field]: e.target.value }));
    }, []);
    const handleIMaskAccept = useCallback(( value: string, maskRef: any, setState: React.Dispatch<React.SetStateAction<any>>, field: string ) => {
        console.log(`IMask Accept: Field=${field}, Unmasked Value=${value}, SetState Function Name=${setState.name}`); // LOGGING
        setState((prev: any) => ({ ...prev, [field]: value }));
     }, []);
    const handleFileChange = useCallback(( e: ChangeEvent<HTMLInputElement>, docKey: AllDocumentKeys ) => { const file = e.target.files ? e.target.files[0] : null; if (!file) { return; }; const maxSizeMB = 5; if (file.size > maxSizeMB * 1024 * 1024) { toast({ variant: "destructive", title: "Arquivo grande", description: `Limite: ${maxSizeMB}MB.` }); e.target.value = ''; return; } const allowedTypes = ['application/pdf', 'image/jpeg', 'image/png', 'image/jpg']; if (!allowedTypes.includes(file.type)) { toast({ variant: "destructive", title: "Tipo inválido", description: `Aceitos: PDF, JPG, PNG.` }); e.target.value = ''; return; } if (docKey in doctorDocuments) setDoctorDocuments(prev => ({ ...prev, [docKey as DoctorDocKeys]: file })); else if (docKey in specialistDocuments) setSpecialistDocuments(prev => ({ ...prev, [docKey as SpecialistDocKeys]: file })); else if (docKey in hospitalDocuments) setHospitalDocuments(prev => ({ ...prev, [docKey as HospitalDocKeys]: file })); else if (docKey in legalRepDocuments) setLegalRepDocuments(prev => ({ ...prev, [docKey as LegalRepDocKeys]: file })); else console.warn(`Chave doc desconhecida: ${docKey}`); }, [toast, doctorDocuments, specialistDocuments, hospitalDocuments, legalRepDocuments]);
    const getFileFromState = useCallback((docKey: AllDocumentKeys): File | null => { if (docKey in doctorDocuments) return doctorDocuments[docKey as DoctorDocKeys]; if (docKey in specialistDocuments) return specialistDocuments[docKey as SpecialistDocKeys]; if (docKey in hospitalDocuments) return hospitalDocuments[docKey as HospitalDocKeys]; if (docKey in legalRepDocuments) return legalRepDocuments[docKey as LegalRepDocKeys]; return null; }, [doctorDocuments, specialistDocuments, hospitalDocuments, legalRepDocuments]);
    const renderFileName = (file: File | null) => { if (!file) return <span className="text-xs text-gray-500 italic ml-2">Nenhum arquivo</span>; return <span className="text-xs text-green-700 font-medium ml-2 truncate max-w-[150px] inline-block align-middle" title={file.name}>{file.name}</span>; };
    const renderFileInput = useCallback((docKey: AllDocumentKeys) => { const labelText = DOCUMENT_LABELS[docKey]; const file = getFileFromState(docKey); const inputId = `file-${docKey}`; const isRequired = labelText.includes('*'); const cleanLabel = labelText.replace('*',''); const showError = isRequired && !file && step === currentStepIndex; return ( <div key={docKey} className="space-y-1"> <Label htmlFor={inputId} className={cn("text-sm font-medium flex items-center")}> {cleanLabel} {isRequired && <span className="text-red-500 ml-1">*</span>} {renderFileName(file)} </Label> <Input id={inputId} type="file" key={inputId + (file ? '-selected' : '-empty')} onChange={(e) => handleFileChange(e, docKey)} className={cn( "block w-full text-sm text-gray-500 cursor-pointer", "file:mr-4 file:py-1.5 file:px-3 file:rounded-md file:border-0", "file:text-sm file:font-semibold file:bg-blue-50 file:text-blue-700", "hover:file:bg-blue-100", showError && "border-red-500 ring-1 ring-red-500" )} accept=".pdf,.jpg,.jpeg,.png" /> {showError && <p className="text-xs text-red-500 mt-1">Campo obrigatório.</p>} </div> ); }, [getFileFromState, handleFileChange, step, currentStepIndex]);
    const handleEditStep = useCallback((stepId: string) => { const stepIndex = stepsConfig.findIndex(s => s.id === stepId); if (stepIndex !== -1) { setStep(stepIndex); } else { console.warn(`Etapa não encontrada: ${stepId}`); setStep(1); } }, [stepsConfig]);

    // --- Navigation and Validation Logic (Validações comentadas como solicitado antes) ---
    const handleNextStep = useCallback(() => { let isValid = true; let errorTitle = "Campos Inválidos"; let errorDescription = "Por favor, revise os campos obrigatórios ou inválidos nesta etapa."; const validate = (condition: boolean, message?: string) => { /* Validação comentada para não bloquear */ return true; }; switch (currentStepConfig?.id) { case 'personalInfo': validate(isNotEmpty(personalInfo.name), "Nome obrigatório."); validate(isValidEmail(personalInfo.email), "Email login inválido."); break; case 'addressInfo': validate(isNotEmpty(addressInfo.street), "Rua obrigatória."); validate(isNotEmpty(addressInfo.number), "Número obrigatório."); validate(isNotEmpty(addressInfo.neighborhood), "Bairro obrigatório."); validate(isNotEmpty(addressInfo.city), "Cidade obrigatória."); validate(isNotEmpty(addressInfo.state) && addressInfo.state.length === 2, "UF inválida."); break; case 'essentialDocs': const eKeys: DoctorDocKeys[] = ['personalRg', 'personalCpf', 'professionalCrm', 'addressProof', 'graduationCertificate', 'photo3x4']; validate(!eKeys.some(k=>!isFilePresent(doctorDocuments[k])), "Docs essenciais obrigatórios."); break; case 'certsAndCvDocs': const cKeys: DoctorDocKeys[] = ['criminalRecordCert', 'ethicalCert', 'debtCert', 'cv']; validate(!cKeys.some(k=>!isFilePresent(doctorDocuments[k])), "Certidões/CV obrigatórios."); break; case 'isSpecialist': break; case 'specialistDocs': const sKeys: SpecialistDocKeys[] = ['rqe', 'postGradCert', 'specialistTitle']; if (isSpecialist) { validate(!sKeys.some(k => !isFilePresent(specialistDocuments[k])), "Docs. especialista obrigatórios."); } break; case 'hospitalInfo': validate(isNotEmpty(hospitalInfo.companyName), "Razão Social obrigatória."); validate(isValidEmail(hospitalInfo.email), "Email empresa inválido."); break; case 'hospitalAddress': validate(isNotEmpty(hospitalAddressInfo.street), "Rua empresa obrigatória."); validate(isNotEmpty(hospitalAddressInfo.number), "Número empresa obrigatório."); validate(isNotEmpty(hospitalAddressInfo.neighborhood), "Bairro empresa obrigatório."); validate(isNotEmpty(hospitalAddressInfo.city), "Cidade empresa obrigatória."); validate(isNotEmpty(hospitalAddressInfo.state) && hospitalAddressInfo.state.length === 2, "UF empresa inválida."); break; case 'hospitalDocs': const hKeys: HospitalDocKeys[] = ['socialContract', 'cnpjCard', 'companyAddressProof']; validate(!hKeys.some(k=>!isFilePresent(hospitalDocuments[k])), "Docs. empresa obrigatórios."); break; case 'legalRepInfo': validate(isNotEmpty(legalRepresentativeInfo.name), "Nome resp. obrigatório."); validate(isValidEmail(legalRepresentativeInfo.email), "Email resp. inválido."); validate(isNotEmpty(legalRepresentativeInfo.position), "Cargo resp. obrigatório."); break; case 'legalRepDocs': const lKeys: LegalRepDocKeys[] = ['repRg', 'repCpf', 'repAddressProof']; validate(!lKeys.some(k=>!isFilePresent(legalRepDocuments[k])), "Docs. resp. obrigatórios."); break; case 'credentials': const lEmail = role === 'doctor' ? personalInfo.email : hospitalInfo.email; if (!validate(isValidEmail(lEmail), "Email inválido.")) { errorTitle = "Email Inválido"; } else if (!validate(isValidPassword(credentials.password), "Senha: mínimo 6 caracteres.")) { errorTitle = "Senha Inválida"; } else if (!validate(credentials.password === credentials.confirmPassword, "As senhas não coincidem.")) { errorTitle = "Senhas Diferentes"; } break; default: break; } if (isValid) { if (step < totalSteps - 1) { setStep(step + 1); window.scrollTo(0, 0); } } else { toast({ variant: "destructive", title: errorTitle, description: errorDescription }); } }, [step, totalSteps, currentStepConfig, role, personalInfo, addressInfo, doctorDocuments, isSpecialist, specialistDocuments, hospitalInfo, hospitalAddressInfo, hospitalDocuments, legalRepresentativeInfo, legalRepDocuments, credentials, toast]);

    const handlePrevStep = () => { if (step > 0) { if (step === 1) { setRole(null); setStep(0); } else { setStep(step - 1); } window.scrollTo(0, 0); } };

    // --- Final Submission ---
    const handleSubmit = async () => { if (!role || currentStepConfig?.id !== 'summary') { toast({ variant: "destructive", title: "Erro", description: "Não é possível finalizar nesta etapa." }); return; } setIsLoading(true); setIsUploading(true); console.log("Iniciando registro final..."); const uploadedDocUrls = { doctorDocs: {} as Partial<DoctorDocumentsRef>, specialistDocs: {} as Partial<SpecialistDocumentsRef>, hospitalDocs: {} as Partial<HospitalDocumentsRef>, legalRepDocs: {} as Partial<LegalRepDocumentsRef>, }; try { const filesToUpload: { key: AllDocumentKeys; file: File }[] = []; if (role === 'doctor') { (Object.keys(doctorDocuments) as DoctorDocKeys[]).forEach(key => { if (doctorDocuments[key]) filesToUpload.push({ key, file: doctorDocuments[key]! }); }); if (isSpecialist) { (Object.keys(specialistDocuments) as SpecialistDocKeys[]).forEach(key => { if (specialistDocuments[key]) filesToUpload.push({ key, file: specialistDocuments[key]! }); }); } } else { (Object.keys(hospitalDocuments) as HospitalDocKeys[]).forEach(key => { if (hospitalDocuments[key]) filesToUpload.push({ key, file: hospitalDocuments[key]! }); }); (Object.keys(legalRepDocuments) as LegalRepDocKeys[]).forEach(key => { if (legalRepDocuments[key]) filesToUpload.push({ key, file: legalRepDocuments[key]! }); }); } console.log(`Iniciando upload de ${filesToUpload.length} arquivos...`); for (const item of filesToUpload) { /* >>>>> IMPLEMENTAR uploadFile REAL <<<<< */ await new Promise(resolve => setTimeout(resolve, 150)); const downloadURL = `https://fake-storage.com/${role}/${item.key}_${item.file.name}`; if (item.key in doctorDocuments) uploadedDocUrls.doctorDocs[item.key as DoctorDocKeys] = downloadURL; else if (item.key in specialistDocuments) uploadedDocUrls.specialistDocs[item.key as SpecialistDocKeys] = downloadURL; else if (item.key in hospitalDocuments) uploadedDocUrls.hospitalDocs[item.key as HospitalDocKeys] = downloadURL; else if (item.key in legalRepDocuments) uploadedDocUrls.legalRepDocs[item.key as LegalRepDocKeys] = downloadURL; } console.log("Uploads concluídos (ou simulados). URLs:", uploadedDocUrls); setIsUploading(false); const loginEmail = role === 'doctor' ? personalInfo.email : hospitalInfo.email; const displayName = role === 'doctor' ? personalInfo.name : hospitalInfo.companyName; let registrationPayload: DoctorRegistrationPayload | HospitalRegistrationPayload; if (role === 'doctor') { registrationPayload = { dob: personalInfo.dob, rg: personalInfo.rg, cpf: personalInfo.cpf, phone: personalInfo.phone, address: addressInfo, isSpecialist: isSpecialist, documents: uploadedDocUrls.doctorDocs, specialistDocuments: isSpecialist ? uploadedDocUrls.specialistDocs : {}, }; } else { registrationPayload = { cnpj: hospitalInfo.cnpj, stateRegistration: hospitalInfo.stateRegistration, phone: hospitalInfo.phone, address: hospitalAddressInfo, legalRepresentativeInfo: { name: legalRepresentativeInfo.name, dob: legalRepresentativeInfo.dob, rg: legalRepresentativeInfo.rg, cpf: legalRepresentativeInfo.cpf, phone: legalRepresentativeInfo.phone, email: legalRepresentativeInfo.email, position: legalRepresentativeInfo.position, }, hospitalDocs: uploadedDocUrls.hospitalDocs, legalRepDocuments: uploadedDocUrls.legalRepDocs, }; } console.log("Chamando registerUser com Payload:", registrationPayload); await registerUser( loginEmail, credentials.password, displayName, role, registrationPayload ); toast({ variant: "default", title: "Cadastro Realizado!", description: "Redirecionando...", }); if (role === 'doctor') { router.push('/dashboard/availability'); } else if (role === 'hospital') { router.push('/hospital/dashboard'); } else { router.push('/'); } } catch (error: any) { console.error("Erro ao finalizar cadastro:", error); setIsLoading(false); setIsUploading(false); let title = "Erro no Cadastro"; let description = "Erro inesperado."; if (isUploading && !(error instanceof FirebaseError)) { title = "Erro no Upload"; description = error.message || "Falha ao enviar um ou mais documentos."; } else if (error instanceof FirebaseError) { switch (error.code) { case 'auth/email-already-in-use': title = "Email já cadastrado"; description="Email já em uso."; break; case 'auth/invalid-email': title = "Email inválido"; break; case 'auth/weak-password': title = "Senha fraca (mín 6 caracteres)"; break; default: description = error.message || description; } } else if (error instanceof Error) { description = error.message; } toast({ variant: "destructive", title: title, description: description }); } };

    // --- Render Current Step ---
    const renderCurrentStep = () => {
        if (!currentStepConfig) return <p>Erro: Etapa inválida.</p>;
        switch (currentStepConfig.id) {
             case 'role': return ( <div className="space-y-4 animate-fade-in"> <Label className="text-base font-semibold block text-center mb-6">Selecione o tipo de cadastro:</Label> <RadioGroup value={role ?? ""} onValueChange={(value) => setRole(value as UserType)} className="grid grid-cols-1 md:grid-cols-2 gap-4"> <Label htmlFor="role-doctor" className={cn( "flex flex-col items-center justify-center p-6 border rounded-lg cursor-pointer transition-colors", "hover:bg-blue-50 hover:border-blue-400", role === 'doctor' ? "bg-blue-50 border-blue-500 ring-2 ring-blue-500" : "bg-white border-gray-300" )} > <RadioGroupItem value="doctor" id="role-doctor" className="sr-only" /> <Stethoscope className={cn("h-10 w-10 mb-3", role === 'doctor' ? "text-blue-700" : "text-gray-500")} /> <span className={cn("font-medium", role === 'doctor' ? "text-blue-800" : "text-gray-700")}>Sou Médico(a)</span> </Label> <Label htmlFor="role-hospital" className={cn( "flex flex-col items-center justify-center p-6 border rounded-lg cursor-pointer transition-colors", "hover:bg-blue-50 hover:border-blue-400", role === 'hospital' ? "bg-blue-50 border-blue-500 ring-2 ring-blue-500" : "bg-white border-gray-300" )} > <RadioGroupItem value="hospital" id="role-hospital" className="sr-only" /> <Building className={cn("h-10 w-10 mb-3", role === 'hospital' ? "text-blue-700" : "text-gray-500")} /> <span className={cn("font-medium", role === 'hospital' ? "text-blue-800" : "text-gray-700")}>Sou Empresa / Hospital</span> </Label> </RadioGroup> {!role && step === 0 && <p className="text-sm text-red-600 pt-4 text-center">Selecione uma opção para continuar.</p>} </div> );
             case 'personalInfo': return (
                // Adiciona form wrapper para ajudar com autofill
                <form autoComplete="off" onSubmit={(e) => e.preventDefault()} className="space-y-4 animate-fade-in">
                    <h3 className="text-lg font-semibold border-b pb-2 mb-4">Dados Pessoais</h3>
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-x-4 gap-y-3">
                        <div className="space-y-1"><Label htmlFor="name">Nome Completo*</Label><Input id="name" name="name" autoComplete="name" defaultValue={personalInfo.name} onChange={(e) => handleInputChange(e, setPersonalInfo, 'name')} required /></div>
                        <div className="space-y-1"><Label htmlFor="dob">Nascimento*</Label><Input id="dob" name="bday" autoComplete="bday" type="date" defaultValue={personalInfo.dob} onChange={(e) => handleInputChange(e, setPersonalInfo, 'dob')} required max={new Date().toISOString().split("T")[0]}/></div>
                        <div className="space-y-1"><Label htmlFor="rg">RG*</Label><Input id="rg" name="rg" autoComplete="off" defaultValue={personalInfo.rg} onChange={(e) => handleInputChange(e, setPersonalInfo, 'rg')} required /></div>
                        <div className="space-y-1"> <Label htmlFor="cpf">CPF*</Label> <InputWithIMask id="cpf" name="cpf" autoComplete="off" maskOptions={{ mask: '000.000.000-00' }} defaultValue={personalInfo.cpf} onAccept={(v) => handleIMaskAccept(v, {} as any, setPersonalInfo, 'cpf')} required placeholder="000.000.000-00" /> </div>
                        <div className="space-y-1"> <Label htmlFor="phone">Telefone*</Label> <InputWithIMask id="phone" name="tel" autoComplete="tel" maskOptions={{ mask: [{ mask: '(00) 0000-0000' }, { mask: '(00) 00000-0000' }] }} defaultValue={personalInfo.phone} onAccept={(v) => handleIMaskAccept(v, {} as any, setPersonalInfo, 'phone')} required placeholder="(00) 90000-0000" type="tel" /> </div>
                        <div className="space-y-1"><Label htmlFor="email">Email (Login)*</Label><Input id="email" name="email" type="email" autoComplete="email" defaultValue={personalInfo.email} onChange={(e) => handleInputChange(e, setPersonalInfo, 'email')} required /></div>
                    </div>
                </form>
             );
             case 'addressInfo': return (
                 // Adiciona form wrapper
                <form autoComplete="off" onSubmit={(e) => e.preventDefault()} className="space-y-4 animate-fade-in">
                    <h3 className="text-lg font-semibold border-b pb-2 mb-4">Endereço Pessoal</h3>
                    <div className="grid grid-cols-1 md:grid-cols-3 gap-x-4 gap-y-3">
                        <div className="space-y-1 md:col-span-1"><Label htmlFor="cep">CEP*</Label><InputWithIMask id="cep" name="postal-code" autoComplete="postal-code" maskOptions={{ mask: '00000-000' }} defaultValue={addressInfo.cep} onAccept={(v) => handleIMaskAccept(v, {} as any, setAddressInfo, 'cep')} required placeholder="00000-000"/></div>
                        <div className="space-y-1 md:col-span-2"><Label htmlFor="street">Rua/Avenida*</Label><Input id="street" name="street-address" autoComplete="street-address" value={addressInfo.street} onChange={(e) => handleInputChange(e, setAddressInfo, 'street')} required /></div> {/* Usa value */}
                        <div className="space-y-1"><Label htmlFor="number">Número*</Label><Input id="number" name="address-line2" autoComplete="address-line2" value={addressInfo.number} onChange={(e) => handleInputChange(e, setAddressInfo, 'number')} required /></div> {/* Usa value */}
                        <div className="space-y-1"><Label htmlFor="complement">Complemento</Label><Input id="complement" name="address-line3" autoComplete="address-line3" value={addressInfo.complement ?? ""} onChange={(e) => handleInputChange(e, setAddressInfo, 'complement')} /></div> {/* Usa value */}
                        <div className="space-y-1"><Label htmlFor="neighborhood">Bairro*</Label><Input id="neighborhood" name="address-level3" autoComplete="off" value={addressInfo.neighborhood} onChange={(e) => handleInputChange(e, setAddressInfo, 'neighborhood')} required /></div> {/* Usa value */}
                        <div className="space-y-1"><Label htmlFor="city">Cidade*</Label><Input id="city" name="address-level2" autoComplete="address-level2" value={addressInfo.city} onChange={(e) => handleInputChange(e, setAddressInfo, 'city')} required /></div> {/* Usa value */}
                        <div className="space-y-1"><Label htmlFor="state">Estado (UF)*</Label><Input id="state" name="address-level1" autoComplete="address-level1" value={addressInfo.state} onChange={(e) => handleInputChange(e, setAddressInfo, 'state')} maxLength={2} required placeholder="SP"/></div> {/* Usa value */}
                    </div>
                </form>
             );
             case 'essentialDocs': return ( <div className="space-y-4 animate-fade-in"> <h3 className="text-lg font-semibold border-b pb-2 mb-4">Documentos Essenciais</h3> <p className="text-xs text-gray-500">Formatos: PDF, JPG, PNG. Tamanho máx: 5MB.</p> <div className="grid grid-cols-1 md:grid-cols-2 gap-x-4 gap-y-4">{['personalRg', 'personalCpf', 'professionalCrm', 'photo3x4', 'addressProof', 'graduationCertificate'].map(key => renderFileInput(key as DoctorDocKeys))}</div> </div>);
             case 'certsAndCvDocs': return ( <div className="space-y-4 animate-fade-in"> <h3 className="text-lg font-semibold border-b pb-2 mb-4">Certidões e Currículo</h3> <p className="text-xs text-gray-500">Formatos: PDF, JPG, PNG. Tamanho máx: 5MB.</p> <div className="grid grid-cols-1 md:grid-cols-2 gap-x-4 gap-y-4">{['criminalRecordCert', 'ethicalCert', 'debtCert', 'cv'].map(key => renderFileInput(key as DoctorDocKeys))}</div> </div>);
             case 'isSpecialist': return ( <div className="space-y-4 animate-fade-in"> <h3 className="text-lg font-semibold border-b pb-2 mb-4">Especialidade Médica</h3> <div className="flex items-center space-x-2 p-4 border rounded-md bg-blue-50 border-blue-200"> <Switch id="is-specialist-switch" checked={isSpecialist} onCheckedChange={setIsSpecialist} /> <Label htmlFor="is-specialist-switch" className="font-medium cursor-pointer">Possui Registro de Qualificação de Especialista (RQE)?</Label> </div> {isSpecialist ? <p className="text-sm text-blue-700"><Info size={14} className="inline mr-1"/>Ótimo! Na próxima etapa, você precisará enviar os documentos comprobatórios.</p> : <p className="text-sm text-gray-600">Ok, você pode prosseguir para a definição da sua senha.</p>} </div>);
             case 'specialistDocs': return ( <div className="space-y-4 animate-fade-in"> <h3 className="text-lg font-semibold border-b pb-2 mb-4">Documentos de Especialista</h3> <p className="text-xs text-gray-500">Envie os comprovantes da sua especialidade.</p> <div className="grid grid-cols-1 md:grid-cols-2 gap-x-4 gap-y-4">{['rqe', 'postGradCert', 'specialistTitle', 'recommendationLetter'].map(key => renderFileInput(key as SpecialistDocKeys))}</div> </div>);
            case 'hospitalInfo': return (
                <form autoComplete="off" onSubmit={(e) => e.preventDefault()} className="space-y-4 animate-fade-in">
                    <h3 className="text-lg font-semibold border-b pb-2 mb-4">Dados da Empresa</h3>
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-x-4 gap-y-3">
                        <div className="space-y-1 md:col-span-2"><Label htmlFor="companyName">Razão Social*</Label><Input id="companyName" name="organization" autoComplete="organization" defaultValue={hospitalInfo.companyName} onChange={(e) => handleInputChange(e, setHospitalInfo, 'companyName')} required /></div>
                        <div className="space-y-1"><Label htmlFor="cnpj">CNPJ*</Label><InputWithIMask id="cnpj" name="cnpj" autoComplete="off" maskOptions={{ mask: '00.000.000/0000-00' }} defaultValue={hospitalInfo.cnpj} onAccept={(v) => handleIMaskAccept(v, {} as any, setHospitalInfo, 'cnpj')} required placeholder="00.000.000/0000-00"/></div>
                        <div className="space-y-1"><Label htmlFor="stateRegistration">Inscrição Estadual</Label><Input id="stateRegistration" name="stateRegistration" autoComplete="off" defaultValue={hospitalInfo.stateRegistration ?? ""} onChange={(e) => handleInputChange(e, setHospitalInfo, 'stateRegistration')} /><p className="text-xs text-gray-500">Se aplicável.</p></div>
                        <div className="space-y-1"><Label htmlFor="hospitalPhone">Telefone Empresa*</Label><InputWithIMask id="hospitalPhone" name="tel" autoComplete="tel-national" maskOptions={{ mask: [{ mask: '(00) 0000-0000' }, { mask: '(00) 00000-0000' }] }} defaultValue={hospitalInfo.phone} onAccept={(v) => handleIMaskAccept(v, {} as any, setHospitalInfo, 'phone')} required placeholder="(00) 0000-0000" type="tel"/></div>
                        <div className="space-y-1"><Label htmlFor="hospitalEmail">Email Empresa (Login)*</Label><Input id="hospitalEmail" name="email" type="email" autoComplete="email" defaultValue={hospitalInfo.email} onChange={(e) => handleInputChange(e, setHospitalInfo, 'email')} required /></div>
                    </div>
                </form>
            );
             case 'hospitalAddress': return (
                 <form autoComplete="off" onSubmit={(e) => e.preventDefault()} className="space-y-4 animate-fade-in">
                    <h3 className="text-lg font-semibold border-b pb-2 mb-4">Endereço da Empresa</h3>
                    <div className="grid grid-cols-1 md:grid-cols-3 gap-x-4 gap-y-3">
                        <div className="space-y-1 md:col-span-1"><Label htmlFor="hosp-cep">CEP*</Label><InputWithIMask id="hosp-cep" name="postal-code" autoComplete="postal-code" maskOptions={{ mask: '00000-000' }} defaultValue={hospitalAddressInfo.cep} onAccept={(v) => handleIMaskAccept(v, {} as any, setHospitalAddressInfo, 'cep')} required placeholder="00000-000"/></div>
                        <div className="space-y-1 md:col-span-2"><Label htmlFor="hosp-street">Rua/Avenida*</Label><Input id="hosp-street" name="street-address" autoComplete="street-address" value={hospitalAddressInfo.street} onChange={(e) => handleInputChange(e, setHospitalAddressInfo, 'street')} required /></div> {/* Usa value */}
                        <div className="space-y-1"><Label htmlFor="hosp-number">Número*</Label><Input id="hosp-number" name="address-line2" autoComplete="address-line2" value={hospitalAddressInfo.number} onChange={(e) => handleInputChange(e, setHospitalAddressInfo, 'number')} required /></div> {/* Usa value */}
                        <div className="space-y-1"><Label htmlFor="hosp-complement">Complemento</Label><Input id="hosp-complement" name="address-line3" autoComplete="address-line3" value={hospitalAddressInfo.complement ?? ""} onChange={(e) => handleInputChange(e, setHospitalAddressInfo, 'complement')} /></div> {/* Usa value */}
                        <div className="space-y-1"><Label htmlFor="hosp-neighborhood">Bairro*</Label><Input id="hosp-neighborhood" name="address-level3" autoComplete="off" value={hospitalAddressInfo.neighborhood} onChange={(e) => handleInputChange(e, setHospitalAddressInfo, 'neighborhood')} required /></div> {/* Usa value */}
                        <div className="space-y-1"><Label htmlFor="hosp-city">Cidade*</Label><Input id="hosp-city" name="address-level2" autoComplete="address-level2" value={hospitalAddressInfo.city} onChange={(e) => handleInputChange(e, setHospitalAddressInfo, 'city')} required /></div> {/* Usa value */}
                        <div className="space-y-1"><Label htmlFor="hosp-state">Estado (UF)*</Label><Input id="hosp-state" name="address-level1" autoComplete="address-level1" value={hospitalAddressInfo.state} onChange={(e) => handleInputChange(e, setHospitalAddressInfo, 'state')} maxLength={2} required placeholder="SP"/></div> {/* Usa value */}
                    </div>
                 </form>
             );
            case 'hospitalDocs': return ( <div className="space-y-4 animate-fade-in"> <h3 className="text-lg font-semibold border-b pb-2 mb-4">Documentos da Empresa</h3> <p className="text-xs text-gray-500">Formatos: PDF, JPG, PNG. Máx: 5MB.</p> <div className="grid grid-cols-1 md:grid-cols-2 gap-x-4 gap-y-4">{['socialContract', 'cnpjCard', 'companyAddressProof'].map(key => renderFileInput(key as HospitalDocKeys))}</div> </div>);
            case 'legalRepInfo': return (
                 <form autoComplete="off" onSubmit={(e) => e.preventDefault()} className="space-y-4 animate-fade-in">
                    <h3 className="text-lg font-semibold border-b pb-2 mb-4">Responsável Legal</h3>
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-x-4 gap-y-3">
                        <div className="space-y-1"><Label htmlFor="repName">Nome Completo*</Label><Input id="repName" name="name" autoComplete="name" defaultValue={legalRepresentativeInfo.name} onChange={(e) => handleInputChange(e, setLegalRepresentativeInfo, 'name')} required /></div>
                        <div className="space-y-1"><Label htmlFor="repDob">Nascimento*</Label><Input id="repDob" name="bday" autoComplete="bday" type="date" defaultValue={legalRepresentativeInfo.dob} onChange={(e) => handleInputChange(e, setLegalRepresentativeInfo, 'dob')} required max={new Date().toISOString().split("T")[0]}/></div>
                        <div className="space-y-1"><Label htmlFor="repRg">RG*</Label><Input id="repRg" name="rg" autoComplete="off" defaultValue={legalRepresentativeInfo.rg} onChange={(e) => handleInputChange(e, setLegalRepresentativeInfo, 'rg')} required /></div>
                        <div className="space-y-1"><Label htmlFor="repCpf">CPF*</Label><InputWithIMask id="repCpf" name="cpf" autoComplete="off" maskOptions={{ mask: '000.000.000-00' }} defaultValue={legalRepresentativeInfo.cpf} onAccept={(v) => handleIMaskAccept(v, {} as any, setLegalRepresentativeInfo, 'cpf')} required placeholder="000.000.000-00"/></div>
                        <div className="space-y-1"><Label htmlFor="repPhone">Telefone*</Label><InputWithIMask id="repPhone" name="tel" autoComplete="tel" maskOptions={{ mask: [{ mask: '(00) 0000-0000' }, { mask: '(00) 00000-0000' }] }} defaultValue={legalRepresentativeInfo.phone} onAccept={(v) => handleIMaskAccept(v, {} as any, setLegalRepresentativeInfo, 'phone')} required placeholder="(00) 90000-0000" type="tel"/></div>
                        <div className="space-y-1"><Label htmlFor="repEmail">Email Pessoal*</Label><Input id="repEmail" name="email" type="email" autoComplete="email" defaultValue={legalRepresentativeInfo.email} onChange={(e) => handleInputChange(e, setLegalRepresentativeInfo, 'email')} required /></div>
                        <div className="space-y-1 md:col-span-2"><Label htmlFor="repPosition">Cargo na Empresa*</Label><Input id="repPosition" name="organization-title" autoComplete="organization-title" defaultValue={legalRepresentativeInfo.position} onChange={(e) => handleInputChange(e, setLegalRepresentativeInfo, 'position')} required /></div>
                    </div>
                 </form>
            );
            case 'legalRepDocs': return ( <div className="space-y-4 animate-fade-in"> <h3 className="text-lg font-semibold border-b pb-2 mb-4">Documentos do Responsável</h3> <p className="text-xs text-gray-500">Formatos: PDF, JPG, PNG. Máx: 5MB.</p> <div className="grid grid-cols-1 md:grid-cols-2 gap-x-4 gap-y-4">{['repRg', 'repCpf', 'repAddressProof'].map(key => renderFileInput(key as LegalRepDocKeys))}</div> </div>);
            case 'credentials': const lEmail = role === 'doctor' ? personalInfo.email : hospitalInfo.email; const emailIsValid = isValidEmail(lEmail); return ( <form autoComplete="off" onSubmit={(e) => e.preventDefault()} className="space-y-4 animate-fade-in"> <h3 className="text-lg font-semibold border-b pb-2 mb-4">Senha de Acesso</h3> <p className={cn("text-sm", emailIsValid ? "text-gray-600" : "text-red-600")}> Email para login: <strong className={cn("break-all", !emailIsValid && "font-semibold")}>{lEmail || "(Não definido)"}</strong> {!emailIsValid && lEmail && <span className="ml-2 font-medium">(Inválido!)</span>} </p> {!emailIsValid && ( <div className="p-3 bg-red-50 border border-red-200 rounded-md text-xs text-red-700 flex items-center gap-2"> <AlertTriangle size={16}/> Email inválido. Volte e corrija. </div> )} <div className="space-y-1"><Label htmlFor="password">Senha*</Label><Input id="password" name="new-password" type="password" autoComplete="new-password" value={credentials.password} onChange={(e) => handleInputChange(e, setCredentials, 'password')} required minLength={6} /> <p className="text-xs text-gray-500">Mínimo 6 caracteres.</p></div> <div className="space-y-1"><Label htmlFor="confirmPassword">Confirme a Senha*</Label><Input id="confirmPassword" name="new-password" type="password" autoComplete="new-password" value={credentials.confirmPassword} onChange={(e) => handleInputChange(e, setCredentials, 'confirmPassword')} required className={cn( credentials.password && credentials.confirmPassword && credentials.password !== credentials.confirmPassword && "border-red-500 ring-1 ring-red-500" )} /> {credentials.password && credentials.confirmPassword && credentials.password !== credentials.confirmPassword && <p className="text-xs text-red-600">As senhas não coincidem.</p>}</div> </form>);
            case 'summary': const summaryData: SummaryData = { personalInfo: role === 'doctor' ? personalInfo : undefined, addressInfo: role === 'doctor' ? addressInfo : undefined, doctorDocuments: role === 'doctor' ? doctorDocuments : undefined, isSpecialist: role === 'doctor' ? isSpecialist : undefined, specialistDocuments: role === 'doctor' && isSpecialist ? specialistDocuments : undefined, hospitalInfo: role === 'hospital' ? hospitalInfo : undefined, hospitalAddressInfo: role === 'hospital' ? hospitalAddressInfo : undefined, hospitalDocuments: role === 'hospital' ? hospitalDocuments : undefined, legalRepresentativeInfo: role === 'hospital' ? legalRepresentativeInfo : undefined, legalRepDocuments: role === 'hospital' ? legalRepDocuments : undefined, credentials: {password: '***'}, }; return <RegistrationSummary role={role!} data={summaryData} onEdit={handleEditStep} />;

            default: return <p>Etapa desconhecida.</p>;
        }
    };

    // --- Main Return JSX ---
    return (
        <div className="container mx-auto px-4 py-8 sm:py-12 max-w-4xl">
            <h1 className="text-2xl sm:text-3xl font-bold text-center mb-3 text-gray-800">Formulário de Cadastro</h1>
            <p className="text-center text-gray-600 text-sm sm:text-base mb-8 sm:mb-10"> Siga as etapas para completar seu registro. Já tem conta?{" "} <Link href="/login" className="text-blue-600 hover:underline font-medium">Faça login</Link> </p>
            <StepIndicator steps={stepsConfig.map(s => s.label)} currentStep={currentStepIndex} />
            <div className="bg-white p-6 sm:p-8 rounded-lg shadow-lg border border-gray-200 min-h-[350px] relative">
                {(isLoading || isUploading) && ( <div className="absolute inset-0 bg-white/80 backdrop-blur-sm flex flex-col items-center justify-center z-20 rounded-lg"> <Loader2 className="h-8 w-8 animate-spin text-blue-600" /> <p className="mt-3 text-sm font-medium text-gray-700">{isUploading ? 'Enviando documentos...' : (isLoading ? 'Processando cadastro...' : '')}</p> <p className="mt-1 text-xs text-gray-500">Por favor, aguarde...</p> </div> )}
                <div className={cn((isLoading || isUploading) && "opacity-30 pointer-events-none")}> {renderCurrentStep()} </div>
            </div>
            <div className="flex justify-between mt-8">
                <Button variant="outline" onClick={handlePrevStep} disabled={step === 0 || isLoading || isUploading} className="px-5 sm:px-6" > Voltar </Button>
                {currentStepConfig?.id === 'summary' ? (
                    <Button onClick={handleSubmit} disabled={isLoading || isUploading} className="bg-green-600 hover:bg-green-700 text-white px-5 sm:px-6" > {isLoading ? <Loader2 className="mr-2 h-4 w-4 animate-spin" /> : <Check className="mr-2 h-4 w-4" />} {isLoading ? (isUploading ? 'Enviando Docs...' : 'Finalizando...') : 'Confirmar e Finalizar Cadastro'} </Button>
                ) : (
                    <Button onClick={handleNextStep} disabled={(!role && step === 0) || isLoading || isUploading} className="px-5 sm:px-6" > Próximo </Button>
                )}
            </div>
        </div>
    );
}