// app/hospital/shifts/page.tsx
"use client";

import type React from "react";
// --- CORRIGIDO: Adicionado ChangeEvent, useMemo ---
import { useState, useEffect, useMemo, useCallback, ChangeEvent } from "react";
import { Button } from "@/components/ui/button";
import type { VariantProps } from "class-variance-authority";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger, DialogFooter, DialogClose } from "@/components/ui/dialog";
import { Calendar } from "@/components/ui/calendar";
import { Select, SelectContent, SelectGroup, SelectItem, SelectLabel, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Label } from "@/components/ui/label";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import { useToast } from "@/hooks/use-toast";
import { Badge } from "@/components/ui/badge";
import { Popover, PopoverContent, PopoverTrigger } from "@/components/ui/popover";
import { Command, CommandEmpty, CommandGroup, CommandInput, CommandItem, CommandList } from "@/components/ui/command";
import { ResponsiveContainer, LineChart, Line, BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend } from 'recharts';
// --- Importando Utilitários e Componentes ---
import { cn, formatCurrency, formatPercentage, formatHours } from "@/lib/utils";
// --- Importando Funções de Serviço ---
import {
    addShiftRequirement,
    getHospitalShiftRequirements,
    deleteShiftRequirement,
    // Funções a implementar:
    // getPendingMatches,
    // getConfirmedShifts,
    // getPastShifts,
    // getHospitalDashboardData,
    type ShiftRequirement,
    // Tipos
    type HospitalKPIs,
    type MonthlyCostData,
    type SpecialtyDemandData,
    type PendingMatch,
    type ConfirmedShift,
    type PastShift,
    type DashboardData
} from "@/lib/hospital-shift-service"; // Ajuste o caminho se necessário
import { medicalSpecialties, ServiceTypeRates } from "@/lib/availability-service";

// --- Import dos Gráficos ---
// Certifique-se que estes arquivos existem e exportam os componentes!
import { SimpleLineChart } from "@/components/charts/SimpleLineChart";
import { SimpleBarChart } from "@/components/charts/SimpleBarChart";

// --- Import Icons ---
import {
    Plus, Loader2, AlertCircle, Users, DollarSign, Briefcase, ClipboardList, Info, Trash2, CheckCircle, History, X, CalendarDays, TrendingUp, WalletCards, MapPin, Target, Clock, Hourglass
} from "lucide-react";

// --- Tipos e Constantes ---
type ButtonVariant = "default" | "destructive" | "outline" | "secondary" | "ghost" | "link" | null | undefined;
const timeOptions = Array.from({ length: 48 }, (_, i) => { const h = Math.floor(i/2); const m = i%2 === 0 ? "00" : "30"; return `${h.toString().padStart(2,"0")}:${m}`; });
const brazilianStates = ["SP", "RJ", "MG", "BA", "AC", "AL", "AP", "AM", "CE", "DF", "ES", "GO", "MA", "MT", "MS", "PA", "PB", "PR", "PE", "PI", "RN", "RS", "RO", "RR", "SC", "SE", "TO" ];
const citiesByState: { [key: string]: string[] } = { "SP": ["São Paulo", "Campinas", "Santos", "Araçariguama", "Guarulhos", "Osasco"], "RJ": ["Rio de Janeiro", "Niterói"], /* ... */ };
const serviceTypesOptions = Object.entries(ServiceTypeRates).map(([v, r]) => ({ value: v, label: v.split('_').map(w=>w[0].toUpperCase()+w.slice(1)).join(' ') }));

// --- Tipos Específicos do Dashboard ---
// (Definidos aqui se não importados do serviço)
// interface HospitalKPIs { ... } ... etc


// --- Componente Principal ---
export default function HospitalShiftsPage() {
    const { toast } = useToast();
    // Estados KPIs e Gráficos
    const [kpiData, setKpiData] = useState<HospitalKPIs | null>(null);
    const [monthlyCostData, setMonthlyCostData] = useState<MonthlyCostData[]>([]);
    const [specialtyDemandData, setSpecialtyDemandData] = useState<SpecialtyDemandData[]>([]);
    // Estados das Tabs
    const [openShifts, setOpenShifts] = useState<ShiftRequirement[]>([]);
    const [pendingMatches, setPendingMatches] = useState<PendingMatch[]>([]);
    const [confirmedShifts, setConfirmedShifts] = useState<ConfirmedShift[]>([]);
    const [pastShifts, setPastShifts] = useState<PastShift[]>([]);
    // Estados de Loading
    const [isLoadingKPIs, setIsLoadingKPIs] = useState(true);
    const [isLoadingOpenShifts, setIsLoadingOpenShifts] = useState(true);
    const [isLoadingPending, setIsLoadingPending] = useState(false);
    const [isLoadingConfirmed, setIsLoadingConfirmed] = useState(false);
    const [isLoadingHistory, setIsLoadingHistory] = useState(false);
    // Estados de Erro
    const [fetchErrorKPIs, setFetchErrorKPIs] = useState<string | null>(null);
    const [fetchErrorOpenShifts, setFetchErrorOpenShifts] = useState<string | null>(null);
    const [fetchErrorPending, setFetchErrorPending] = useState<string | null>(null);
    const [fetchErrorConfirmed, setFetchErrorConfirmed] = useState<string | null>(null);
    const [fetchErrorHistory, setFetchErrorHistory] = useState<string | null>(null);
    // Outros Estados
    const [isAddShiftDialogOpen, setIsAddShiftDialogOpen] = useState(false);
    const [activeTab, setActiveTab] = useState("open");

    // --- Funções de Busca (PLACEHOLDERS - Implementar Lógica Real!) ---
    const fetchDashboardData = useCallback(async (currentOpenShiftsCount?: number) => { setIsLoadingKPIs(true); setFetchErrorKPIs(null); try { console.log("Simulando busca de KPIs e Gráficos..."); await new Promise(res => setTimeout(res, 600)); const countOpen = currentOpenShiftsCount ?? 0; const countPending = 5; const kpis: HospitalKPIs = { openShiftsCount: countOpen, pendingActionCount: countPending, totalDoctorsOnPlatform: 152, costLast30Days: 25780.50, fillRateLast30Days: 85.7, avgTimeToFillHours: 4.2, topSpecialtyDemand: 'Clínica Médica' }; const costs: MonthlyCostData[] = [ { name: 'Jan', valor: 18000 }, { name: 'Fev', valor: 21500 }, { name: 'Mar', valor: 25780.50 }, { name: 'Abr', valor: 15300 } ]; const demand: SpecialtyDemandData[] = [ { name: 'Cl. Médica', valor: 8 }, { name: 'Cardio', valor: 5 }, { name: 'Pediatria', valor: 4 }, { name: 'Orto', valor: 3 }, { name: 'G.O.', valor: 2 }]; const dashboardDataResult: DashboardData = { kpis, monthlyCosts: costs, specialtyDemand: demand }; setKpiData(dashboardDataResult.kpis); setMonthlyCostData(dashboardDataResult.monthlyCosts); setSpecialtyDemandData(dashboardDataResult.specialtyDemand); } catch (error: any) { console.error("Error dashboard data:", error); setFetchErrorKPIs(error.message || "Erro dados painel."); } finally { setIsLoadingKPIs(false); } }, []);
    const fetchOpenShifts = useCallback(async (updateData = true) => { setIsLoadingOpenShifts(true); setFetchErrorOpenShifts(null); let f: ShiftRequirement[] = []; try { f = await getHospitalShiftRequirements() || []; setOpenShifts(f.sort((a, b) => a.date.getTime() - b.date.getTime() || a.startTime.localeCompare(b.startTime))); } catch (error: any) { console.error("Error open shifts:", error); setFetchErrorOpenShifts(error.message || "Erro vagas."); if (updateData) setFetchErrorKPIs(error.message || "Erro vagas iniciais."); } finally { setIsLoadingOpenShifts(false); if (updateData) { fetchDashboardData(f.length); } } }, [fetchDashboardData]);
    const fetchPendingMatches = useCallback(async () => { if (isLoadingPending) return; setIsLoadingPending(true); setFetchErrorPending(null); try { console.log("Buscando pendentes (sim)..."); await new Promise(res => setTimeout(res, 900)); const m: PendingMatch[] = [ { id: 'm1', date: new Date(2025, 4, 20), startTime: '07:00', endTime: '19:00', specialty: 'Pediatria', status: 'pending_doctor_acceptance', offeredRate: 160, doctorName: 'Dr. P A' }, { id: 'm2', date: new Date(2025, 4, 21), startTime: '19:00', endTime: '07:00', specialty: 'Cl. Médica', status: 'pending_signatures', offeredRate: 150, doctorName: 'Dra. P B' }, ]; setPendingMatches(m.map(match => ({...match, date: new Date(match.date)}))); } catch (error: any) { console.error("Error pending matches:", error); setFetchErrorPending(error.message || "Erro pendentes."); } finally { setIsLoadingPending(false); } }, [isLoadingPending]);
    const fetchConfirmedShifts = useCallback(async () => { if (isLoadingConfirmed) return; setIsLoadingConfirmed(true); setFetchErrorConfirmed(null); try { console.log("Buscando confirmados (sim)..."); await new Promise(res => setTimeout(res, 800)); const s: ConfirmedShift[] = [ { id: 'up1', date: new Date(2025, 4, 15), startTime: '07:00', endTime: '19:00', doctorName: 'Dr. Silva', specialty: 'Cardio' }, { id: 'up2', date: new Date(2025, 4, 18), startTime: '19:00', endTime: '07:00', doctorName: 'Dra. Souza', specialty: 'Cl. Médica' }, ]; setConfirmedShifts(s.map(shift => ({...shift, date: new Date(shift.date)}))); } catch (error: any) { console.error("Error confirmed:", error); setFetchErrorConfirmed(error.message || "Erro confirmados."); } finally { setIsLoadingConfirmed(false); } }, [isLoadingConfirmed]);
    const fetchPastShifts = useCallback(async () => { if (isLoadingHistory) return; setIsLoadingHistory(true); setFetchErrorHistory(null); try { console.log("Buscando histórico (sim)..."); await new Promise(res => setTimeout(res, 1000)); const s: PastShift[] = [ { id: 'p1', date: new Date(2025, 3, 1), startTime: '07:00', endTime: '19:00', doctorName: 'Dr. Fulano', status: 'Concluído', cost: 1800 }, { id: 'p2', date: new Date(2025, 2, 28), startTime: '19:00', endTime: '07:00', doctorName: 'Dra. Ciclana', status: 'Concluído', cost: 2100 }, { id: 'p3', date: new Date(2025, 2, 25), startTime: '07:00', endTime: '19:00', doctorName: 'Dr. Beltrano', status: 'Cancelado' }, ]; setPastShifts(s.map(shift => ({...shift, date: new Date(shift.date)}))); } catch (error: any) { console.error("Error history:", error); setFetchErrorHistory(error.message || "Erro histórico."); } finally { setIsLoadingHistory(false); } }, [isLoadingHistory]);

    // Fetch inicial
    useEffect(() => { fetchOpenShifts(true); }, [fetchOpenShifts]);

    // Handlers
    const handleTabChange = (value: string) => { setActiveTab(value); if (value === 'pending' && !pendingMatches.length && !isLoadingPending) { fetchPendingMatches(); } else if (value === 'confirmed' && !confirmedShifts.length && !isLoadingConfirmed) { fetchConfirmedShifts(); } else if (value === 'history' && !pastShifts.length && !isLoadingHistory) { fetchPastShifts(); } }
    const handleCancelShift = async (id: string | undefined) => { if (!id) return; try { await deleteShiftRequirement(id); toast({ title: "Vaga Cancelada", variant: "default" }); fetchOpenShifts(true); } catch (error: any) { toast({ title: "Erro ao Cancelar", description: error.message || "Falha", variant: "destructive"}); } };
    const onShiftAdded = () => { setIsAddShiftDialogOpen(false); setActiveTab("open"); fetchOpenShifts(true); };

    // --- Renderização ---
    return (
        <div className="flex flex-col gap-6 md:gap-8">
            <h1 className="text-2xl md:text-3xl font-bold tracking-tight text-gray-800">Painel do Hospital</h1>

             {/* Erro Geral */}
             {fetchErrorKPIs && isLoadingKPIs && isLoadingOpenShifts && (
                 <ErrorState message={fetchErrorKPIs || fetchErrorOpenShifts || "Erro ao carregar dados iniciais."} onRetry={fetchOpenShifts} />
             )}

            {/* Seção KPIs */}
             <section aria-labelledby="kpi-heading"> <h2 id="kpi-heading" className="text-xl font-semibold mb-4 sr-only">Visão Geral</h2> <div className="grid gap-3 sm:gap-4 grid-cols-2 md:grid-cols-4 lg:grid-cols-7"> <KPICard title="Vagas Abertas" value={kpiData?.openShiftsCount ?? '-'} icon={AlertCircle} isLoading={isLoadingOpenShifts} description="Aguardando médicos" /> <KPICard title="Pendentes Ação" value={kpiData?.pendingActionCount ?? '-'} icon={Hourglass} isLoading={isLoadingKPIs} description="Matches/contratos" /> <KPICard title="Taxa Preenchim." value={formatPercentage(kpiData?.fillRateLast30Days)} icon={Target} isLoading={isLoadingKPIs} description="Eficiência (30d)" /> <KPICard title="Custo Estimado" value={formatCurrency(kpiData?.costLast30Days)} icon={WalletCards} isLoading={isLoadingKPIs} description="Gasto (30d)" /> <KPICard title="Tempo Médio Preench." value={formatHours(kpiData?.avgTimeToFillHours)} icon={Clock} isLoading={isLoadingKPIs} description="Agilidade (h)" /> <KPICard title="Médicos" value={kpiData?.totalDoctorsOnPlatform ?? '-'} icon={Users} isLoading={isLoadingKPIs} description="Na plataforma" /> <KPICard title="Top Demanda" value={kpiData?.topSpecialtyDemand ?? '-'} icon={TrendingUp} isLoading={isLoadingKPIs} description="Especialidade" /> </div> </section>

             {/* Seção Gráficos */}
             <section aria-labelledby="charts-heading"> <h2 id="charts-heading" className="text-xl font-semibold mb-4 mt-4 text-gray-700">Análises Gráficas</h2> {(fetchErrorKPIs && !isLoadingKPIs) && ( <ErrorState message={`Erro dados gráficos: ${fetchErrorKPIs}`} onRetry={() => fetchOpenShifts(true)} /> )} <div className="grid gap-4 grid-cols-1 lg:grid-cols-2"> {(isLoadingKPIs || !monthlyCostData || monthlyCostData.length === 0) ? ( <Card><CardContent className="h-[218px] flex items-center justify-center"><LoadingState /></CardContent></Card> ) : ( <SimpleLineChart data={monthlyCostData} title="Custo Mensal Estimado" description="Evolução dos gastos" dataKey="valor" strokeColor="#16a34a" /> )} {(isLoadingKPIs || !specialtyDemandData || specialtyDemandData.length === 0) ? ( <Card><CardContent className="h-[218px] flex items-center justify-center"><LoadingState /></CardContent></Card> ) : ( <SimpleBarChart data={specialtyDemandData} title="Demanda por Especialidade" description="Vagas recentes (Top)" dataKey="valor" fillColor="#3b82f6" /> )} </div> </section>

            {/* Seção Gerenciamento (Tabs) */}
            <section aria-labelledby="shifts-heading"> <h2 id="shifts-heading" className="text-xl font-semibold mb-4 mt-4 text-gray-700">Gerenciamento de Plantões</h2> <Tabs value={activeTab} onValueChange={handleTabChange} className="w-full"> <div className="flex flex-col sm:flex-row justify-between sm:items-center gap-3 mb-4 border-b pb-3"> <TabsList className="grid w-full grid-cols-4 sm:w-auto shrink-0"> <TabsTrigger value="open" className="text-xs sm:text-sm px-2 sm:px-3">Abertas {isLoadingOpenShifts ? <Loader2 className="h-3 w-3 animate-spin ml-1.5"/> : ''}</TabsTrigger> <TabsTrigger value="pending" className="text-xs sm:text-sm px-2 sm:px-3">Pendentes {isLoadingPending ? <Loader2 className="h-3 w-3 animate-spin ml-1.5"/> : ''}</TabsTrigger> <TabsTrigger value="confirmed" className="text-xs sm:text-sm px-2 sm:px-3">Confirmados {isLoadingConfirmed ? <Loader2 className="h-3 w-3 animate-spin ml-1.5"/> : ''}</TabsTrigger> <TabsTrigger value="history" className="text-xs sm:text-sm px-2 sm:px-3">Histórico {isLoadingHistory ? <Loader2 className="h-3 w-3 animate-spin ml-1.5"/> : ''}</TabsTrigger> </TabsList> <Dialog open={isAddShiftDialogOpen} onOpenChange={setIsAddShiftDialogOpen}><DialogTrigger asChild><Button size="sm" className="w-full sm:w-auto"><Plus className="mr-1.5 h-4 w-4" /> Publicar Nova Vaga</Button></DialogTrigger><AddShiftDialog onShiftAdded={onShiftAdded} /></Dialog> </div>
                {/* Conteúdo das Tabs */}
                <TabsContent value="open"> <Card className="shadow-sm border-blue-100"> <CardHeader className="border-b border-blue-50 py-3 px-4"><CardTitle className="text-base font-semibold text-gray-800">Vagas em Aberto</CardTitle></CardHeader> <CardContent className="p-4 pt-6"> {isLoadingOpenShifts ? ( <LoadingState /> ) : fetchErrorOpenShifts ? ( <ErrorState message={fetchErrorOpenShifts} onRetry={() => fetchOpenShifts(false)}/> ) : openShifts.length === 0 ? ( <EmptyState message="Nenhuma vaga aberta." /> ) : ( <div className="space-y-3">{openShifts.map(req => (<ShiftListItem key={req.id} shift={req} actions={[{ label: "Cancelar", icon: Trash2, onClick: () => handleCancelShift(req.id), variant: "ghost", className:"text-red-600 hover:text-red-700 hover:bg-red-50 rounded-full w-8 h-8" }]}/>))}</div> )} </CardContent> </Card> </TabsContent>
                <TabsContent value="pending"> <Card className="shadow-sm border-yellow-200"> <CardHeader className="border-b border-yellow-100 py-3 px-4"><CardTitle className="text-base font-semibold text-gray-800">Pendentes de Ação</CardTitle><CardDescription className="text-sm">Matches/Vagas aguardando.</CardDescription></CardHeader> <CardContent className="p-4 pt-6"> {isLoadingPending ? ( <LoadingState /> ) : fetchErrorPending ? ( <ErrorState message={fetchErrorPending} onRetry={fetchPendingMatches}/> ) : pendingMatches.length === 0 ? ( <EmptyState message="Nenhuma pendência." /> ) : ( <div className="space-y-3">{/* TODO: <PendingMatchListItem match={match} /> */ pendingMatches.map(match => ( <div key={match.id} className="border p-3 rounded-md bg-white text-sm shadow-sm flex justify-between items-center"><span>Pendente ({match.status.replace('_',' ')}): {match.date.toLocaleDateString("pt-BR", { day: "2-digit", month: "short" })} - {match.specialty} {match.doctorName ? `- Dr(a). ${match.doctorName}` : ''}</span><Button variant="outline" size="sm" className="h-7 px-2 text-xs">Detalhes</Button></div>))}</div> )} </CardContent> </Card> </TabsContent>
                <TabsContent value="confirmed"> <Card className="shadow-sm border-green-200"> <CardHeader className="border-b border-green-100 py-3 px-4"><CardTitle className="text-base font-semibold text-gray-800">Plantões Confirmados</CardTitle></CardHeader> <CardContent className="p-4 pt-6"> {isLoadingConfirmed ? ( <LoadingState /> ) : fetchErrorConfirmed ? ( <ErrorState message={fetchErrorConfirmed} onRetry={fetchConfirmedShifts}/> ) : confirmedShifts.length === 0 ? ( <EmptyState message="Nenhum plantão confirmado." /> ) : ( <div className="space-y-3">{/* TODO: <ConfirmedShiftListItem shift={shift} /> */ confirmedShifts.map(shift => ( <div key={shift.id} className="border p-3 rounded-md bg-white text-sm shadow-sm flex justify-between items-center"><span>Conf: {shift.date.toLocaleDateString("pt-BR", { day: "2-digit", month: "short" })} ({shift.startTime}-{shift.endTime}) - {shift.doctorName} ({shift.specialty || 'N/A'})</span></div>))}</div> )} </CardContent> </Card> </TabsContent>
                <TabsContent value="history"> <Card className="shadow-sm border-gray-200"> <CardHeader className="border-b border-gray-100 py-3 px-4"><CardTitle className="text-base font-semibold text-gray-800">Histórico de Plantões</CardTitle></CardHeader> <CardContent className="p-4 pt-6"> {isLoadingHistory ? ( <LoadingState /> ) : fetchErrorHistory ? ( <ErrorState message={fetchErrorHistory} onRetry={fetchPastShifts}/> ) : pastShifts.length === 0 ? ( <EmptyState message="Nenhum histórico." /> ) : ( <div className="space-y-3">{/* TODO: <PastShiftListItem shift={shift} /> */ pastShifts.map(shift => ( <div key={shift.id} className="border p-3 rounded-md bg-white text-sm shadow-sm flex justify-between items-center"><span>Hist: {shift.date.toLocaleDateString("pt-BR", { day: "2-digit", month: "short" })} - {shift.doctorName} ({shift.status}) {shift.cost ? `- ${formatCurrency(shift.cost)}` : ''}</span></div>))}</div> )} </CardContent> </Card> </TabsContent>
            </Tabs> </section>
        </div>
    );
}


// --- COMPONENTES AUXILIARES (DEFINIDOS AQUI NESTE ARQUIVO) ---

// --- CORRIGIDO: Definições de LoadingState, EmptyState, ErrorState adicionadas ---
const LoadingState = () => ( <div className="flex justify-center items-center py-10 min-h-[150px]"> <Loader2 className="h-6 w-6 animate-spin text-blue-600" /> <span className="ml-3 text-sm text-gray-600">Carregando...</span> </div> );
const EmptyState = ({ message }: { message: string }) => ( <div className="text-center text-sm text-gray-500 py-10 min-h-[150px] flex flex-col items-center justify-center bg-gray-50/80 rounded-md border border-dashed"> <ClipboardList className="w-10 h-10 text-gray-400 mb-3"/> {message} </div> );
const ErrorState = ({ message, onRetry }: { message: string; onRetry?: () => void }) => ( <div className="text-center text-sm text-red-600 py-10 min-h-[150px] flex flex-col items-center justify-center bg-red-50 rounded-md border border-red-200"> <AlertCircle className="w-10 h-10 text-red-500 mb-3"/> <p className="font-medium mb-1">Ocorreu um erro</p> <p className="mb-3 px-4">{message || "Erro desconhecido."}</p> {/* Mensagem padrão */} {onRetry && ( <Button variant="destructive" size="sm" onClick={onRetry}> Tentar Novamente </Button> )} </div> );

// KPICard (COM A CORREÇÃO DE OVERFLOW)
interface KPICardProps { title: string; value: string | number; description?: string; icon: React.ElementType; isLoading: boolean; }
const KPICard: React.FC<KPICardProps> = ({ title, value, description, icon: Icon, isLoading }) => { return ( <Card className="shadow-sm hover:shadow-md transition-shadow duration-200 min-w-0"> <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2"> <CardTitle className="text-sm font-medium text-gray-600 truncate pr-2">{title}</CardTitle> <Icon className="h-4 w-4 text-muted-foreground shrink-0" /> </CardHeader> <CardContent className="pt-0 pb-3 px-3 overflow-hidden"> {isLoading ? ( <div className="h-8 flex items-center"><Loader2 className="h-5 w-5 animate-spin text-muted-foreground" /></div> ) : ( <div className={cn( "font-bold text-gray-900", "text-lg md:text-xl lg:text-2xl", "leading-tight" )} title={value?.toString()} > {value} </div> )} {description && !isLoading && <p className="text-xs text-muted-foreground pt-1 truncate">{description}</p>} </CardContent> </Card> ); };

// ShiftListItem (Definição Completa)
interface ShiftListItemProps { shift: ShiftRequirement; actions?: { label: string; icon: React.ElementType; onClick: () => void; variant?: ButtonVariant; className?: string }[]; }
const ShiftListItem: React.FC<ShiftListItemProps> = ({ shift, actions }) => { const serviceTypeLabel = serviceTypesOptions.find(opt => opt.value === shift.serviceType)?.label || shift.serviceType; const status = shift.status || 'open'; const statusColor = cn( "text-xs mb-1 capitalize px-1.5 py-0.5 font-medium rounded-full", status === 'open' ? 'bg-blue-100 text-blue-800' : status === 'filled' || status === 'confirmed' || status === 'completed' ? 'bg-green-100 text-green-800' : status === 'pending_doctor_acceptance' || status === 'pending_signatures' ? 'bg-yellow-100 text-yellow-800' : status === 'cancelled' ? 'bg-red-100 text-red-800' : 'bg-gray-100 text-gray-800' ); return ( <div className={cn("flex flex-col sm:flex-row items-start sm:items-center justify-between border rounded-lg p-4 gap-3 transition-opacity duration-300 bg-white shadow-xs hover:shadow-sm")}> <div className="flex-1 space-y-1.5 pr-2 min-w-0"> <div className="flex items-center justify-between flex-wrap gap-2"> <div className="flex items-center gap-2 text-sm font-semibold text-gray-800"> <CalendarDays className="h-4 w-4 shrink-0 text-blue-600" /> <span suppressHydrationWarning>{shift.date ? shift.date.toLocaleDateString("pt-BR", { day: "2-digit", month: "short", year: "numeric" }) : "Inválida"}</span> <span className="text-gray-500 font-normal">({shift.startTime} - {shift.endTime})</span> </div> {status !== 'open' && <Badge className={statusColor}>{status.replace(/_/g, ' ')}</Badge>} </div> <div className="grid grid-cols-1 sm:grid-cols-2 gap-x-4 gap-y-1 text-xs text-gray-600 mt-1"> <div className="flex items-center gap-1.5 truncate"><MapPin className="h-3.5 w-3.5 shrink-0 text-purple-600" /><span>{shift.city}, {shift.state}</span></div> <div className="flex items-center gap-1.5 truncate"><Briefcase className="h-3.5 w-3.5 shrink-0 text-cyan-600" /><span>{serviceTypeLabel}</span></div> <div className="flex items-center gap-1.5 text-green-700 font-medium sm:col-span-2"><DollarSign className="h-3.5 w-3.5 shrink-0" /><span>{formatCurrency(shift.offeredRate)}/hora</span></div> </div> {shift.specialtiesRequired && shift.specialtiesRequired.length > 0 && ( <div className="flex flex-wrap items-center gap-1 pt-1.5"> <span className="text-xs text-gray-500 mr-1 font-medium shrink-0">Requer:</span> {shift.specialtiesRequired.map((s) => (<Badge key={s} variant="outline" className="text-gray-700 text-xs px-1.5 py-0.5 font-normal border-blue-200 bg-blue-50">{s}</Badge>))} </div> )} {shift.notes && (<p className="text-xs text-gray-500 pt-1.5 italic truncate"><Info className="inline h-3 w-3 mr-1 align-middle"/>{shift.notes}</p>)} </div> {actions && actions.length > 0 && ( <div className="flex items-center space-x-1 shrink-0 mt-2 sm:mt-0 self-end sm:self-center"> {actions.map(action => ( <Button key={action.label} variant={action.variant ?? "ghost"} size="icon" onClick={action.onClick} className={cn("h-8 w-8", action.className)} aria-label={action.label}> <action.icon className="h-4 w-4"/> </Button> ))} </div> )} </div> ); }

// AddShiftDialog (COM A CORREÇÃO NA TIPAGEM)
interface AddShiftDialogProps { onShiftAdded: () => void; }
// --- CORRIGIDO: Removido React.FC e adicionado tipo de retorno explícito ---
const AddShiftDialog = ({ onShiftAdded }: AddShiftDialogProps): React.ReactElement => {
    const { toast } = useToast(); const [dates, setDates] = useState<Date[]>([]); const [startTime, setStartTime] = useState("07:00"); const [endTime, setEndTime] = useState("19:00"); const [isLoadingAdd, setIsLoadingAdd] = useState(false); const [specialtyPopoverOpen, setSpecialtyPopoverOpen] = useState(false); const [requiredSpecialties, setRequiredSpecialties] = useState<string[]>([]); const [specialtySearchValue, setSpecialtySearchValue] = useState(""); const [timeError, setTimeError] = useState<string | null>(null); const [selectedState, setSelectedState] = useState<string>(""); const [selectedCity, setSelectedCity] = useState<string>(""); const [availableCities, setAvailableCities] = useState<string[]>([]); const [selectedServiceType, setSelectedServiceType] = useState<string>(""); const [offeredRateInput, setOfferedRateInput] = useState<string>(""); const [notes, setNotes] = useState<string>(""); const validateTimes = useCallback((start: string, end: string) => { if (start && end && start >= end ) {const isOvernight = end < start; if (!isOvernight) {setTimeError("Início deve ser anterior ao término.");} else {setTimeError(null);}} else { setTimeError(null); } }, []); useEffect(() => { validateTimes(startTime, endTime); }, [startTime, endTime, validateTimes]); useEffect(() => { if (selectedState) setAvailableCities(citiesByState[selectedState] || []); else setAvailableCities([]); setSelectedCity(""); }, [selectedState]); const handleSelectRequiredSpecialty = (specialty: string) => { if (!requiredSpecialties.includes(specialty)) setRequiredSpecialties([...requiredSpecialties, specialty]); setSpecialtySearchValue(""); setSpecialtyPopoverOpen(false); }; const handleRemoveRequiredSpecialty = (specialtyToRemove: string) => { setRequiredSpecialties(prev => prev.filter((s) => s !== specialtyToRemove)); }; const filteredSpecialties = useMemo(() => medicalSpecialties.filter(s => typeof s === 'string' && s.toLowerCase().includes(specialtySearchValue.toLowerCase()) && !requiredSpecialties.includes(s)), [specialtySearchValue, requiredSpecialties]); const handleAddShiftSubmit = async () => { const offeredRate = parseFloat(offeredRateInput.replace(',', '.')); if (dates.length === 0) { toast({title:"Selecione data(s)", variant: "destructive"}); return; } if (timeError) { toast({title:"Horário inválido", description: timeError, variant: "destructive"}); return; } if (!selectedServiceType) { toast({title:"Selecione tipo", variant: "destructive"}); return; } if (isNaN(offeredRate) || offeredRate <= 0) { toast({title:"Valor hora inválido (>0)", variant: "destructive"}); return; } if (!selectedState || !selectedCity) { toast({title:"Selecione local", variant: "destructive"}); return; } setIsLoadingAdd(true); let s=0, e=0; const p = dates.map(async (d) => { try { const shiftData: Omit<ShiftRequirement, "id"|"hospitalId"|"status"|"createdAt"|"updatedAt"> = { date:d, startTime, endTime, specialtiesRequired: requiredSpecialties, serviceType: selectedServiceType, offeredRate, city: selectedCity, state: selectedState, notes }; await addShiftRequirement(shiftData); s++; } catch (err:any) { e++; console.error(`Fail ${d.toLocaleDateString()}:`, err); toast({ title: `Erro ${d.toLocaleDateString()}`, description: err.message || "Erro", variant: "destructive"}); } }); await Promise.all(p); setIsLoadingAdd(false); if (s > 0) { toast({ title: "Operação Concluída", description: `${s} vaga(s) publicada(s). ${e > 0 ? `${e} falharam.` : ''}`, variant: "default"}); onShiftAdded(); } else if (e > 0) { toast({ title: "Nenhuma vaga publicada", description: "Ocorreram erros.", variant: "destructive"});} };
    return ( <DialogContent className="sm:max-w-2xl"> <DialogHeader> <DialogTitle>Publicar Nova Vaga de Plantão</DialogTitle> <DialogDescription>Preencha os detalhes da vaga. Selecione múltiplos dias para criar vagas idênticas.</DialogDescription> </DialogHeader> <div className="grid gap-4 py-4 max-h-[75vh] overflow-y-auto px-2 pr-5"> <div className="space-y-1.5"><Label className="font-medium text-gray-800">Data(s)*</Label><Calendar mode="multiple" selected={dates} onSelect={(selectedDays) => setDates(selectedDays || [])} disabled={{ before: new Date(new Date().setHours(0, 0, 0, 0)) }} className="p-0 border rounded-md w-auto inline-block shadow-sm"/> {dates.length > 0 && <p className="text-xs text-blue-700">{dates.length} dia(s) selecionado(s).</p>}</div> <div className="grid grid-cols-2 gap-4"> <div className="space-y-1.5"><Label htmlFor="start-time-modal" className="font-medium text-gray-800">Início*</Label><Select value={startTime} onValueChange={setStartTime}><SelectTrigger id="start-time-modal" className={cn("h-9", timeError && "border-red-500")}><SelectValue/></SelectTrigger><SelectContent>{timeOptions.map(t=><SelectItem key={"st"+t} value={t}>{t}</SelectItem>)}</SelectContent></Select></div> <div className="space-y-1.5"><Label htmlFor="end-time-modal" className="font-medium text-gray-800">Término*</Label><Select value={endTime} onValueChange={setEndTime}><SelectTrigger id="end-time-modal" className={cn("h-9", timeError && "border-red-500")}><SelectValue/></SelectTrigger><SelectContent>{timeOptions.map(t=><SelectItem key={"et"+t} value={t}>{t}</SelectItem>)}</SelectContent></Select></div> {timeError && <p className="text-red-600 text-xs col-span-2">{timeError}</p>} </div> <div className="grid grid-cols-2 gap-4"> <div className="space-y-1.5"><Label htmlFor="state-modal" className="font-medium text-gray-800">Estado*</Label><Select value={selectedState} onValueChange={setSelectedState}><SelectTrigger id="state-modal" className="h-9"><SelectValue placeholder="UF..."/></SelectTrigger><SelectContent>{brazilianStates.map(s=><SelectItem key={s} value={s}>{s}</SelectItem>)}</SelectContent></Select></div> <div className="space-y-1.5"><Label htmlFor="city-modal" className="font-medium text-gray-800">Cidade*</Label><Select value={selectedCity} onValueChange={setSelectedCity} disabled={!selectedState||!availableCities.length}><SelectTrigger id="city-modal" className="h-9"><SelectValue placeholder={!selectedState?"UF?":(!availableCities.length?"Sem cidades":"Cidade...")}/></SelectTrigger><SelectContent>{availableCities.map(c=><SelectItem key={c} value={c}>{c}</SelectItem>)}</SelectContent></Select></div> </div> <div className="grid grid-cols-2 gap-4"> <div className="space-y-1.5"><Label htmlFor="service-type-modal" className="font-medium text-gray-800">Tipo Atend.*</Label><Select value={selectedServiceType} onValueChange={setSelectedServiceType}><SelectTrigger id="service-type-modal" className="h-9"><SelectValue placeholder="Selecione..."/></SelectTrigger><SelectContent>{serviceTypesOptions.map(o=><SelectItem key={o.value} value={o.value}>{o.label}</SelectItem>)}</SelectContent></Select></div> <div className="space-y-1.5"><Label htmlFor="offered-rate-modal" className="font-medium text-gray-800">Valor Hora (R$)*</Label><Input id="offered-rate-modal" type="number" min="0.01" step="0.01" placeholder="150.00" value={offeredRateInput} onChange={(e)=>setOfferedRateInput(e.target.value)} className="h-9"/></div> </div> <div className="space-y-1.5"> <Label className="flex items-center gap-1.5 font-medium text-gray-800"><ClipboardList className="h-4 w-4"/>Especialidades Requeridas (Opcional)</Label> <Popover open={specialtyPopoverOpen} onOpenChange={setSpecialtyPopoverOpen}><PopoverTrigger asChild><Button variant="outline" className="w-full justify-start font-normal text-muted-foreground h-9">{requiredSpecialties.length > 0 ? requiredSpecialties.join(', ') : "Nenhuma (clique p/ adicionar)"}</Button></PopoverTrigger><PopoverContent className="w-[--radix-popover-trigger-width] p-0"><Command><CommandInput placeholder="Buscar..." value={specialtySearchValue} onValueChange={setSpecialtySearchValue}/><CommandList><CommandEmpty>Nenhuma.</CommandEmpty><CommandGroup>{filteredSpecialties.map((s) => (<CommandItem key={s} value={s} onSelect={() => handleSelectRequiredSpecialty(s)} className="cursor-pointer">{s}</CommandItem>))}</CommandGroup></CommandList></Command></PopoverContent></Popover> {requiredSpecialties.length > 0 && (<div className="flex flex-wrap gap-1 mt-2">{requiredSpecialties.map((s) => (<Badge key={s} variant="secondary" className="bg-gray-100 hover:bg-gray-200">{s}<button type="button" onClick={()=>handleRemoveRequiredSpecialty(s)} className="ml-1.5 p-0.5 rounded-full outline-none focus:ring-1 focus:ring-ring hover:bg-gray-300"><X className="h-3 w-3 text-muted-foreground hover:text-foreground" /></button></Badge>))}</div>)} </div> <div className="space-y-1.5"><Label htmlFor="notes-modal" className="font-medium text-gray-800">Notas Adicionais</Label><Textarea id="notes-modal" placeholder="Algum detalhe importante para o médico..." value={notes} onChange={(e) => setNotes(e.target.value)} /></div> </div> <DialogFooter className="mt-2 pt-4 border-t"> <DialogClose asChild><Button type="button" variant="outline" disabled={isLoadingAdd}>Cancelar</Button></DialogClose> <Button type="button" onClick={handleAddShiftSubmit} disabled={isLoadingAdd}>{isLoadingAdd && <Loader2 className="mr-2 h-4 w-4 animate-spin" />} Publicar Vaga(s)</Button> </DialogFooter> </DialogContent> );
};
// --- FIM DOS COMPONENTES AUXILIARES ---