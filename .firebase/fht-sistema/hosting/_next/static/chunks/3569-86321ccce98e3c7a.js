"use strict";(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[3569],{92651:function(r,e,t){t.d(e,{CQ:function(){return l},DD:function(){return s},Fl:function(){return m},TX:function(){return f},Ts:function(){return E},bI:function(){return y},c0:function(){return p},et:function(){return w},hc:function(){return I},l5:function(){return u},pH:function(){return h},q9:function(){return d}});var o=t(43301),a=t(5978),i=t(17293),n=t(13491);(0,n.V1)(i.wk,"createStaffUser");let c=(0,n.V1)(i.wk,"confirmUserSetup"),s=async()=>{try{await c()}catch(r){console.warn("Falha ao tentar confirmar o primeiro login:",r)}},u=async r=>{try{let e=(0,a.hJ)(i.db,"users"),t=(0,a.IO)(e,(0,a.ar)("hospitalId","==",r)),o=await (0,a.PL)(t);if(o.empty)return[];return o.docs.map(r=>({uid:r.id,...r.data()})).filter(e=>e.uid!==r)}catch(e){throw console.error("[AuthService] Erro ao buscar a Equipa para o hospital ".concat(r,":"),e),Error("N\xe3o foi poss\xedvel carregar a lista da Equipa.")}},d=async(r,e,t)=>{try{let a=await (0,o.Xb)(i.I8,r,e);return await (0,o.ck)(a.user,{displayName:t}),a.user}catch(r){throw console.error("[AuthService] Erro ao criar usu\xe1rio no Auth:",r),r}},l=async(r,e,t,o,n)=>{console.log("--- DEBUGGING: DENTRO DE completeUserRegistration ---"),console.log("Tentando criar perfil para o Utilizador ID:",r),console.log("Payload de dados recebido:",n),console.log("-------------------------------------------------");try{let c={};if("doctor"===o){let{documents:r,specialistDocuments:e,invitationToken:t,...o}=n;c={...o,documents:r,specialistDocuments:e,invitationToken:t||null}}else if("hospital"===o){let{hospitalDocs:r,legalRepDocuments:e,...t}=n;c={companyInfo:{cnpj:t.cnpj,stateRegistration:t.stateRegistration,phone:t.phone,address:t.address},legalRepresentativeInfo:t.legalRepresentativeInfo,hospitalDocs:r,legalRepDocuments:e}}else if(["receptionist","triage_nurse","caravan_admin","admin","backoffice"].includes(o))c={};else throw Error("Tipo de perfil de registro inv\xe1lido.");let s={uid:r,email:e,displayName:t,userType:o,createdAt:(0,a.Bt)(),updatedAt:(0,a.Bt)(),documentVerificationStatus:"PENDING_REVIEW",adminVerificationNotes:"",...c},u=(0,a.JU)(i.db,"users",r);await (0,a.pl)(u,s),console.log("[AuthService] Perfil para ".concat(r," criado com SUCESSO no Firestore."))}catch(r){throw console.error("[AuthService] ERRO CR\xcdTICO ao tentar criar o perfil no Firestore:",r),r}},h=async(r,e)=>{try{return(await (0,o.e5)(i.I8,r,e)).user}catch(r){throw console.error("[AuthService] Login error:",r),r}},f=async()=>{try{await (0,o.w7)(i.I8)}catch(r){throw console.error("[AuthService] Logout error:",r),r}},p=async r=>{try{await (0,o.LS)(i.I8,r)}catch(r){throw console.error("[AuthService] Reset error:",r),r}},E=async()=>{let r=i.I8.currentUser;if(!r)return null;try{let e=(0,a.JU)(i.db,"users",r.uid),t=await (0,a.QT)(e);if(t.exists())return{uid:t.id,...t.data()};return null}catch(r){throw console.error("[AuthService] Get current user data error:",r),r}},w=async r=>{if(!r)return null;try{let e=(0,a.JU)(i.db,"users",r),t=await (0,a.QT)(e);if(t.exists())return{uid:t.id,...t.data()};return console.warn("[AuthService] Nenhum perfil encontrado para o ID: ".concat(r)),null}catch(e){throw console.error("[AuthService] Erro ao buscar perfil para o ID ".concat(r,":"),e),Error("N\xe3o foi poss\xedvel buscar o perfil do utilizador.")}},y=async(r,e)=>{if(!r)throw Error("ID do Doutor n\xe3o fornecido para atualiza\xe7\xe3o.");if(!e||0===Object.keys(e).length){console.warn("[AuthService] Nenhum dado fornecido para atualiza\xe7\xe3o do perfil do doutor.");return}let t=(0,a.JU)(i.db,"users",r),o={};if(Object.keys(e).forEach(r=>{void 0!==e[r]&&("address"===r&&"object"==typeof e.address&&null!==e.address?Object.keys(e.address).forEach(r=>{void 0!==e.address[r]&&(o["address.".concat(r)]=e.address[r])}):o[r]=e[r])}),0===Object.keys(o).length){console.warn("[AuthService] Nenhum dado v\xe1lido para atualizar ap\xf3s filtrar undefined.");return}o.updatedAt=(0,a.Bt)();try{var n;let e=await (0,a.QT)(t);if(!e.exists()||(null===(n=e.data())||void 0===n?void 0:n.userType)!=="doctor")throw Error("Perfil de doutor n\xe3o encontrado ou tipo de usu\xe1rio incorreto para atualiza\xe7\xe3o.");await (0,a.r7)(t,o),console.log("[AuthService] Perfil do doutor ".concat(r," atualizado com sucesso."))}catch(e){throw console.error("[AuthService] Erro ao atualizar perfil do doutor ".concat(r,":"),e),e}},m=async(r,e)=>{try{let t=(0,a.hJ)(i.db,"users"),o=(0,a.IO)(t,(0,a.ar)("userType","==","doctor"),(0,a.ar)("specialties","array-contains",e),(0,a.ar)("healthUnitIds","array-contains",r)),n=await (0,a.PL)(o);if(n.empty)return[];return n.docs.map(r=>({uid:r.id,...r.data()}))}catch(r){throw console.error("[AuthService] Erro ao buscar m\xe9dicos associados por especialidade:",r),Error("N\xe3o foi poss\xedvel carregar a lista de m\xe9dicos para esta unidade.")}},I=async function(r,e){let t=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"",o=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{};if(!r)throw Error("ID do usu\xe1rio n\xe3o fornecido.");let n=(0,a.JU)(i.db,"users",r),c={documentVerificationStatus:e,adminVerificationNotes:t,documentRejectionReasons:o,updatedAt:(0,a.Bt)()};"APPROVED"===e&&(c.documentRejectionReasons={},c.adminVerificationNotes="");try{await (0,a.r7)(n,c)}catch(e){throw console.error("Erro ao atualizar status do usu\xe1rio ".concat(r,":"),e),Error("Falha ao atualizar o status do cadastro.")}}},33569:function(r,e,t){t.d(e,{AX:function(){return c},CW:function(){return u},G2:function(){return s},xf:function(){return n}});var o=t(5978),a=t(17293),i=t(92651);let n=async r=>{let e=a.I8.currentUser;if(!e)throw Error("Usu\xe1rio n\xe3o autenticado.");let t=await (0,i.Ts)();if(!t||"hospital"!==t.role)throw Error("Perfil de hospital n\xe3o encontrado ou inv\xe1lido.");let n={...r,hospitalId:e.uid,hospitalName:t.displayName,publishedByUID:e.uid,publishedByName:e.displayName||t.displayName||void 0,status:"OPEN",createdAt:(0,o.Bt)(),updatedAt:(0,o.Bt)()};try{let r=await (0,o.ET)((0,o.hJ)(a.db,"shiftRequirements"),n);return console.log("[SERVICE] Nova Demanda de Plant\xe3o adicionada com ID: ",r.id),r.id}catch(r){throw console.error("[SERVICE] Erro ao adicionar demanda:",r),r}},c=async(r,e)=>{if(!a.I8.currentUser)throw Error("Usu\xe1rio n\xe3o autenticado.");let t=(0,o.JU)(a.db,"shiftRequirements",r);try{await (0,o.r7)(t,{...e,updatedAt:(0,o.Bt)()}),console.log("[SERVICE] Demanda ID:",r,"atualizada.")}catch(r){throw console.error("[SERVICE] Erro ao atualizar demanda:",r),r}},s=async()=>{let r=a.I8.currentUser;if(!r)return[];try{let e=(0,o.IO)((0,o.hJ)(a.db,"shiftRequirements"),(0,o.ar)("hospitalId","==",r.uid),(0,o.ar)("status","==","OPEN"),(0,o.Xo)("createdAt","desc")),t=await (0,o.PL)(e),i=[];return t.forEach(r=>{i.push({id:r.id,...r.data()})}),console.log("[SERVICE] getHospitalShiftRequirements (OPEN): Encontradas ".concat(i.length," demandas.")),i}catch(r){throw console.error("[SERVICE] Erro getHospitalShiftRequirements:",r),r}},u=async r=>{if(!a.I8.currentUser)throw Error("Usu\xe1rio n\xe3o autenticado.");try{await (0,o.oe)((0,o.JU)(a.db,"shiftRequirements",r)),console.log("[SERVICE] Demanda deletada ID:",r)}catch(r){throw console.error("[SERVICE] Erro ao deletar demanda:",r),r}}}}]);